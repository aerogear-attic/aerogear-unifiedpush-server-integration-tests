import com.google.common.io.Files
import groovy.json.JsonOutput
import org.arquillian.spacelift.Spacelift
import org.arquillian.spacelift.gradle.CertificateGenerator
import org.arquillian.spacelift.gradle.DeferredValue
import org.arquillian.spacelift.gradle.android.AndroidSdkInstallation
import org.arquillian.spacelift.gradle.arquillian.ArquillianXmlUpdater
import org.arquillian.spacelift.gradle.certs.KeystoreInstallation
import org.arquillian.spacelift.gradle.container.UpdateJBossConfig
import org.arquillian.spacelift.gradle.container.db.module.MySQLDatabaseModule
import org.arquillian.spacelift.gradle.container.db.module.PostgreSQLDatabaseModule
import org.arquillian.spacelift.gradle.cordova.CordovaExecutor
import org.arquillian.spacelift.gradle.gradle.GradleInstallation
import org.arquillian.spacelift.gradle.maven.MavenExecutor
import org.arquillian.spacelift.gradle.maven.MavenInstallation
import org.arquillian.spacelift.gradle.maven.SettingsXmlUpdater
import org.arquillian.spacelift.gradle.openshift.UPSOpenShiftInstallation
import org.arquillian.spacelift.gradle.quickstart.ShootAndShareQuickstartHelper
import org.arquillian.spacelift.gradle.text.ProcessTemplate
import org.arquillian.spacelift.process.CommandBuilder
import org.arquillian.spacelift.task.archive.UnzipTool
import org.arquillian.spacelift.task.archive.UntarTool
import org.jboss.aerogear.test.Session
import org.jboss.aerogear.test.api.application.PushApplicationWorker
import org.jboss.aerogear.test.api.auth.LoginRequest
import org.jboss.aerogear.test.api.variant.android.AndroidVariantWorker
import org.jboss.aerogear.test.container.manager.JBossManagerConfiguration
import org.jboss.aerogear.test.container.manager.configuration.ContainerType
import org.jboss.aerogear.unifiedpush.api.AndroidVariant
import org.jboss.aerogear.unifiedpush.api.PushApplication
import org.jboss.shrinkwrap.resolver.api.ResolutionException
import org.jboss.shrinkwrap.resolver.api.maven.ConfigurableMavenResolverSystem
import org.jboss.shrinkwrap.resolver.api.maven.Maven
import org.jboss.shrinkwrap.resolver.api.maven.repository.MavenRemoteRepositories

apply plugin: 'org.arquillian.spacelift'

ext {
    defaultUnifiedPushModelRepository = null
    defaultUnifiedPushModelVersion = '1.1.3.Final'
    defaultUnifiedPushTestExtensionVersion = '1.1.0.Final'
    defaultIpVersion = 'IPv4'


    defaultUnifiedPushMavenRepository = 'https://repository.jboss.org/nexus/content/groups/staging'

    defaultEap6Version = '6.4.4'
    defaultEap6RemoteUrl = ''

    defaultProtocols = ['http']
    defaultBrowser = 'firefox'

    // FIXME these object are used to persist states in between installations as we don't have better model
    // container related configuration
    // you should pass jbossHome iff you want to use externally prepared container
    container = [
            home         : project.hasProperty('jbossHome') ? new File(project.jbossHome) : null,
            configuration: new JBossManagerConfiguration()
                    .setStandaloneConfig('standalone-full.xml')
                    .setContainerType(ContainerType.EAP)
                    .setStartupTimeoutInSeconds(300),
            bindAddress  : project.hasProperty('jbossBindAddress') ? project.jbossBindAddress : '127.0.0.1',
            localDomain  : project.hasProperty('localDomain') ? project.localDomain : '127.0.0.1'
    ]

    // unified push related configuration
    unifiedpush = [
            type       : 'as7',
            binariesDir: new File(project.rootDir, 'spacelift/upsBin'),
            datasource : project.hasProperty('datasource') ? project.datasource : null,
            db         : [
                    jdbc_url: project.hasProperty('dbJdbc_url') ? project.dbJdbc_url : 'jdbc:mysql://localhost:3306/unifiedpush?useUnicode=true&characterEncoding=UTF-8',
                    username: project.hasProperty('dbUsername') ? project.dbUsername : 'unifiedpush',
                    password: project.hasProperty('dbPassword') ? project.dbPassword : 'unifiedpush',
                    driver  : project.hasProperty('dbDriver') ? project.dbDriver : 'com.mysql.jdbc.Driver'
            ],
            runMigrator: project.hasProperty('runMigrator') ? Boolean.parseBoolean(project.runMigrator) : true,
            // TODO spacelift.workspace is not yet available here
            apnsCert   : new File(project.rootDir, 'spacelift/workspace/certs/apns_server.jks'),
            gcmCert    : new File(project.rootDir, 'spacelift/workspace/certs/gcm_mock.crt'),
            gcmKey     : new File(project.rootDir, 'spacelift/workspace/certs/gcm_mock.key')
    ]

}

spacelift {
    workspace = new File(project.rootDir, 'spacelift/workspace')
    installationsDir = new File(project.rootDir, 'spacelift/cache')

    tools {
        rhc {
            command 'rhc'
        }
        keytool {
            command 'keytool'
        }
        gradlew {
            command([
                    linux  : ['./gradlew', '--stacktrace'],
                    mac    : ['./gradlew', '--stacktrace'],
                    windows: ['gradlew.bat', '--stacktrace']
            ])
        }
        java {
            command ([
                    linux: "java",
                    windows: "java.exe",
                    mac: "java",
                    solaris: "java"
            ])
        }

    }

    profiles {

        // dynamically create profiles for combination of container type and ups source
        // containers
        ['wildfly8', 'eap6', 'any'].each { String container ->
            // ups installations
            ['upsProvided', 'upsFromSource', 'upsFromMavenRepository'].each { String ups ->

                def profileName = "${container}${ups.capitalize()}"

                // order installations, container must be installed prior ups and aerogearTestingTools as latest
                def _installations = ['keystore', 'maven', "${container}Container"]

                // add datasource installation
                switch (project.unifiedpush.datasource) {
                    case "mysql":
                    case "postgresql":
                        logger.warn(":init:Profile ${profileName} will trigger ${project.unifiedpush.datasource} datasource installation")
                        _installations << project.unifiedpush.datasource
                        break
                    default:
                        logger.warn(":init:Profile ${profileName} will not trigger datasource installation")

                }

                _installations += ['proxy', 'unifiedPushServerModel', 'unifiedPushJavaClient', 'aerogearTestingTools', ups]
                def _tests = ['localIntegrationTests']

                // dynamically create profile with name e.g. wildfly8UpsProvided
                create(profileName, [:], DeferredValue.of(Void.class).ownedBy(this).from {
                    enabledInstallations _installations
                    tests _tests
                })
            }
        }

        helloWorldCordovaQuickstart {
            enabledInstallations 'maven', 'unifiedPushServerModel', 'aerogearTestingTools', 'androidSdk', 'unifiedPushServerQuickstarts', 'helloWorldCordovaQuickstart'
            tests 'helloWorldCordovaQuickstart'
        }

        shootAndShareCordovaQuickstart {
            enabledInstallations 'maven', 'shootAndShareAndroidSdk', 'gradle112', 'shootAndShareCordovaQuickstart'
            tests 'shootAndShareCordovaQuickstart'
        }
    }

    installations {
        maven(from: MavenInstallation) {
            version { "3.2.5" }
        }

        gradle112(from: GradleInstallation) {
            version { "1.12" }
            alias { "gradle112" }
            environment {
                [
                        "ANDROID_HOME"    : androidSdk.home.canonicalPath,
                        "ANDROID_SDK_HOME": androidSdk.home.parentFile.canonicalPath
                ]
            }
        }

        // installs keystore
        keystore(from: KeystoreInstallation) {
            isInstalled {
                // we need to delete keystore/truststore later updates - apns cert generation needs to be regenerated
                // and put into truststore - hence fresh truststore is needed
                // as a side effect, this call will also remove any existing project.unifiedpush.apnsCert file
                project.ant.delete(dir: "${home.canonicalPath}")
                return false
            }
        }

        // apns & gcm proxy
        proxy {
            product 'proxy'
            version 'unused'
            isInstalled {
                new File(project.rootDir, "tools/proxy/impl/build/libs/proxy.jar").exists()
            }
            postActions {
                project.tasks.create('compileProxy', GradleBuild) {
                    buildFile = '../build.gradle'
                    tasks = [
                            ':tools:proxy:impl:fatJar'
                    ]
                    startParameter.systemPropertiesArgs.put('spacelift.disable', 'true')
                }.execute()
            }
            tools {
                proxy {
                    command {
                        new CommandBuilder(java.getCommand().resolve())
                                .parameters("-jar", new File(project.rootDir, "tools/proxy/impl/build/libs/proxy.jar").absolutePath)
                    }
                }
            }
        }

        // install UPS model, required for UPS REST API
        unifiedPushServerModel {
            product 'aerogear'
            version { project.unifiedPushModelVersion }
            remoteUrl 'https://github.com/aerogear/aerogear-unifiedpush-server/archive/1.1.3.Final.zip'
            home 'aerogear-unifiedpush-server-pre-release'
            extractMapper { toDir(home).cutdirs() }
            // trigger installation only if model is not already in the repository
            isInstalled {
                // if there is additional Maven repository, add it there
                if (project.unifiedPushModelRepository != null) {
                    Spacelift.task(SettingsXmlUpdater)
                            .repository("external-repository", project.unifiedPushModelRepository, false)
                            .execute().await()
                }

                try {
                    final String modelCoordinates = "org.jboss.aerogear.unifiedpush:unifiedpush-model-jpa:${version}"
                    Maven.configureResolver()
                            .fromFile(new File(project.spacelift.workspace, "settings.xml"))
                            .resolve(modelCoordinates).withoutTransitivity().asSingleFile()
                    return true
                }
                catch (ResolutionException e) {
                    return false
                }
            }
            postActions {
                // install parent as prerequisite to installing model
                Spacelift.task(MavenExecutor).pom('pom.xml')
                        .workingDir(home.absolutePath)
                        .withoutSubprojects()
                        .goals('clean', 'install')
                        .properties('skipTests', 'maven.javadoc.skip=true')
                        .execute().await()

                // install model
                Spacelift.task(MavenExecutor).pom('model/pom.xml')
                        .workingDir(home.absolutePath)
                        .goals('clean', 'install')
                        .properties('skipTests', 'maven.javadoc.skip=true')
                        .execute().await()

                // install push
                Spacelift.task(MavenExecutor).pom('push/pom.xml')
                        .workingDir(home.absolutePath)
                        .withoutSubprojects()
                        .goals('clean', 'install')
                        .properties('skipTests', 'maven.javadoc.skip=true')
                        .execute().await()

                // install push model
                Spacelift.task(MavenExecutor).pom('push/model/pom.xml')
                        .workingDir(home.absolutePath)
                        .goals('clean', 'install')
                        .properties('skipTests', 'maven.javadoc.skip=true')
                        .execute().await()
            }
        }

        unifiedPushJavaClient {
            product 'aerogear'
            version '1.1.0.Final'
            remoteUrl 'https://github.com/aerogear/aerogear-unifiedpush-java-client/archive/master.zip'
            home 'aerogear-unifiedpush-java-client'
            fileName 'aerogear-unifiedpush-java-client.zip'
            extractMapper { toDir(home).cutdirs() }
            isInstalled { true }
            postActions {
                Spacelift.task(MavenExecutor).pom('pom.xml')
                        .workingDir(home.absolutePath)
                        .goals('clean', 'install')
                        .properties('skipTests', 'maven.javadoc.skip=true')
                        .execute().await()
            }
        }

        aerogearTestingTools {

            def testExtensionWar = new File(project.unifiedpush.binariesDir, 'unifiedpush-test-extension-server.war')
            home { new File(project.rootDir, 'tools') }
            // FIXME, there should be better condition - the problem is that we need rebuild if ups location is switched
            isInstalled false
            postActions {
                // Build test extension WAR
                /*Spacelift.task('gradlew')
                        .parameter(':tools:test-extension:server:clean')
                        .parameter(':tools:test-extension:server:war')
                        .execute().await()*/

                project.tasks.create('compileUnifiedPushTestExtension', GradleBuild) {
                    buildFile = '../build.gradle'
                    tasks = [':tools:test-extension:server:clean', ':tools:test-extension:server:assemble']
                    startParameter.systemPropertiesArgs.put('spacelift.disable', 'true')
                }.execute()

                project.ant.mkdir(dir: project.unifiedpush.binariesDir)
                Files.copy(new File(home, 'test-extension/server/build/libs/server.war'), testExtensionWar)

                // update truststore with certificate and push certs to a convenient location
                Files.copy(new File(home, 'test-extension/sslcert/gcm_mock.crt'), project.unifiedpush.gcmCert)
                Files.copy(new File(home, 'test-extension/sslcert/gcm_mock.key'), project.unifiedpush.gcmKey)
                CertificateGenerator certificateGenerator = Spacelift.task(CertificateGenerator)
                        .apnsCertificate(project.unifiedpush.apnsCert)
                        .gcmCertificate(project.unifiedpush.gcmCert)
                // update existing keystore
                        .trustStore(keystore.truststore)
                        .commonName(project.container.localDomain)

                certificateGenerator.execute().await()
            }
        }


        wildfly8Container {
            product { 'jboss' }
            version { '8.2.0' }
            fileName { 'wildfly-8.2.0.Final.zip' }
            remoteUrl { 'http://download.jboss.org/wildfly/8.2.0.Final/wildfly-8.2.0.Final.zip' }
            home { 'wildfly-8.2.0.Final' }
            extractMapper { toDir(home).cutdirs() }
            isInstalled {
                // FIXME this is abusing of isInstalled closure, this should be defined in profile when available
                project.container.configuration.setContainerType(ContainerType.WILDFLY)
                project.container.home = home
                project.unifiedpush.type = 'wildfly'

                // There seems to be an error on subsequent runs with the keycloak-default persistence unit
                // so we reinstall each time.
                return false
            }
            postActions {
                project.ant.chmod(dir: "${home}/bin", perm: "a+x", includes: "**/*.sh")

                // enable https
                File scriptTemplate = new File(project.rootDir, "setup/enable_https-${project.unifiedpush.type}.cli")
                Spacelift.task(scriptTemplate, ProcessTemplate.class).bindings(
                        [
                                alias           : keystore.alias,
                                keyPassword     : keystore.keystorePass,
                                keystorePassword: keystore.keystorePass,
                                keystore        : keystore.keystore.canonicalPath,
                                truststore      : keystore.truststore
                        ]).then(UpdateJBossConfig.class).shouldStartContainer().jbossHome(project.container.home).execute().await()
            }
        }

        eap6Container {
            product 'eap'
            version { project.eap6Version }
            remoteUrl { project.eap6RemoteUrl }
            extractMapper { toDir(home).cutdirs() }
            home { "jboss-eap-${version}" }
            preconditions {
                if (!project.eap6RemoteUrl) {
                    throw new IllegalStateException("You must specify url to download EAP distribution via eap6RemoteUrl property")
                }
                return true
            }
            isInstalled {

                // FIXME this is abusing of isInstalled closure, this should be defined in profile when available
                project.container.home = home
                project.container.configuration.setContainerType(ContainerType.EAP)
                project.unifiedpush.type = 'as7'

                // reinstall container every time
                return false
            }
            postActions {
                project.ant.chmod(dir: "${home}/bin", perm: "a+x", includes: "**/*.sh")

                // enable https
                File scriptTemplate = new File(project.rootDir, "setup/enable_https-${project.unifiedpush.type}.cli")
                Spacelift.task(scriptTemplate, ProcessTemplate.class).bindings(
                        [
                                alias           : keystore.alias,
                                keyPassword     : keystore.keystorePass,
                                keystorePassword: keystore.keystorePass,
                                keystore        : keystore.keystore.canonicalPath,
                                truststore      : keystore.truststore
                        ]).then(UpdateJBossConfig.class).shouldStartContainer().jbossHome(project.container.home).execute().await()
            }
        }

        // this is used to use already existing and preconfigured container
        anyContainer {
            product 'unused'
            version 'unused'
            preconditions {
                if (!project.container.home) {
                    throw new IllegalStateException("You must specify 'jbossHome' with path to home of your container")
                }

                if (!project.container.bindAddress) {
                    throw new IllegalStateException("You must specify 'jbossBindAddress' with ip address")
                }
                if (!project.container.localDomain) {
                    throw new IllegalStateException("You must specify 'localDomain' with ip address")
                }
                return true
            }
            isInstalled false
            postActions {
                // enable https
                File scriptTemplate = new File(project.rootDir, "setup/enable_https-${project.unifiedpush.type}.cli")
                Spacelift.task(scriptTemplate, ProcessTemplate.class).bindings(
                        [
                                alias           : keystore.alias,
                                keyPassword     : keystore.keystorePass,
                                keystorePassword: keystore.keystorePass,
                                keystore        : keystore.keystore.canonicalPath,
                                truststore      : keystore.truststore
                        ]).then(UpdateJBossConfig.class).shouldStartContainer().jbossHome(project.container.home).execute().await()
            }
        }

        // mysql installation in valid only if container was installed
        mysql {
            product 'unused'
            version 'unused'
            isInstalled false
            postActions {
                // install module
                new MySQLDatabaseModule('com.mysql.jdbc', project.container.home)
                        .shouldStartContainer()
                        .version('5.1.18')
                // FIXME it would be better to uninstall it first
                        .install()

                // install datasource
                File scriptTemplate = new File(project.rootDir, "setup/mysql-${project.unifiedpush.type}.cli")
                Spacelift.task(scriptTemplate, ProcessTemplate.class).bindings(project.unifiedpush)
                        .then(UpdateJBossConfig.class).jbossConfiguration(project.container.configuration).jbossHome(project.container.home).shouldStartContainer().execute().await()
            }
        }

        // postgres installation is valid only if container was installed
        postgresql {
            product 'unused'
            version 'unused'
            isInstalled false
            postActions {
                // install module
                new PostgreSQLDatabaseModule('org.postgresql', project.container.home)
                        .shouldStartContainer()
                // FIXME it would be better to uninstall it first
                        .install()

                // install datasource
                File scriptTemplate = new File(project.rootDir, "setup/postgresql-${project.unifiedpush.type}.cli")
                Spacelift.task(scriptTemplate, ProcessTemplate.class).bindings(project.unifiedpush)
                        .then(UpdateJBossConfig.class).jbossConfiguration(project.container.configuration).jbossHome(project.container.home).shouldStartContainer().execute().await()
            }
        }

        upsFromSource {
            product 'aerogear'
            version '1.1.3.Final'
            isInstalled false
            remoteUrl 'https://github.com/aerogear/aerogear-unifiedpush-server/archive/1.1.3.Final.zip'
            home 'aerogear-unifiedpush-server'
            extractMapper { toDir(home).cutdirs() }
            postActions {
                Spacelift.task(MavenExecutor).pom('pom.xml')
                        .workingDir(home.absolutePath)
                        .goals('clean', 'package')
                        .properties('skipTests', 'maven.javadoc.skip=true')
                        .execute().await()

                // copy files to directory where files to be deployed are stored
                Files.copy(
                        new File(home, 'servers/auth-server/target/auth-server.war'),
                        new File(project.unifiedpush.binariesDir, 'auth-server.war'))
                Files.copy(
                        new File(home, "servers/ups-${project.unifiedpush.type}/target/ag-push.war"),
                        new File(project.unifiedpush.binariesDir, 'ag-push.war'))

                // prepare migrator
                if (project.unifiedpush.runMigrator) {
                    List<String> migratorDist = new FileNameFinder().getFileNames(new File(home, "migrator/target").canonicalPath, "*.zip")
                    if (migratorDist == null || migratorDist.size() != 1) {
                        throw new IllegalStateException("Expecting migrator dist in migrator/target directory")
                    }
                    Spacelift.task(new File("${migratorDist[0]}"), UnzipTool.class)
                            .toDir(new File(project.unifiedpush.binariesDir, 'migrator')).cutdirs().execute().await()
                    project.ant.chmod(dir: "${new File(project.unifiedpush.binariesDir, 'migrator/bin/').canonicalPath}", perm: "a+x", includes: "*")
                }

            }
            tools {
                migrator {
                    command {
                        return new CommandBuilder("${project.unifiedpush.binariesDir}/migrator/bin/ups-migrator")
                                .parameter("--logLevel=DEBUG")
                                .parameter("--changeLogFile=${home}/migrator/src/main/resources/liquibase/master.xml")
                    }
                }
            }
        }

        upsFromMavenRepository {
            product 'aerogear'
            version '1.1.3.Final'
            isInstalled { false }
            postActions {
                final authServerCanonicalCoordinate = "org.jboss.aerogear.unifiedpush:unifiedpush-auth-server:war:${version}"
                final agpushCanonicalCoordinate = "org.jboss.aerogear.unifiedpush:unifiedpush-server-${project.unifiedpush.type}:war:${version}"
                final agpushMigratorCoordinate = "org.jboss.aerogear.unifiedpush:unifiedpush-migrator:zip:dist:${version}"
                final agpushMigratorJarCoordinate = "org.jboss.aerogear.unifiedpush:unifiedpush-migrator:${version}"

                ConfigurableMavenResolverSystem resolver = Maven.configureResolver()
                        .withRemoteRepo(MavenRemoteRepositories
                        .createRemoteRepository('remote_ups', project.unifiedPushMavenRepository, 'default'))
                        .withMavenCentralRepo(true)

                // copy files to directory where files to be deployed are stored

                Files.copy(
                        resolver.resolve(authServerCanonicalCoordinate).withoutTransitivity().asSingleFile(),
                        new File(project.unifiedpush.binariesDir, 'auth-server.war'))
                Files.copy(
                        resolver.resolve(agpushCanonicalCoordinate).withoutTransitivity().asSingleFile(),
                        new File(project.unifiedpush.binariesDir, 'ag-push.war'))

                if (project.unifiedpush.runMigrator) {
                    // prepare migrator, we need to download both binary dist and changeset in jar
                    Spacelift.task(resolver.resolve(agpushMigratorCoordinate).withoutTransitivity().asSingleFile(), UnzipTool.class)
                            .toDir(new File(project.unifiedpush.binariesDir, 'migrator')).cutdirs().execute().await()
                    project.ant.chmod(dir: "${new File(project.unifiedpush.binariesDir, 'migrator/bin/').canonicalPath}", perm: "a+x", includes: "*")

                    Spacelift.task(resolver.resolve(agpushMigratorJarCoordinate).withoutTransitivity().asSingleFile(), UnzipTool.class)
                            .toDir(new File(project.unifiedpush.binariesDir, 'migrator')).execute().await()
                }

            }
            tools {
                if (project.unifiedpush.runMigrator) {
                    migrator {
                        command {
                            return new CommandBuilder("${project.unifiedpush.binariesDir}/migrator/bin/ups-migrator")
                                    .parameter("--logLevel=DEBUG")
                                    .parameter("--changeLogFile=${project.unifiedpush.binariesDir}/migrator/liquibase/master.xml")
                        }
                    }
                }
            }
        }

        /**
         * Purpose of this is to enable running against previously downloaded wars.
         */
        upsProvided {
            product 'aerogear'
            version '1.1.3.Final'
            preconditions {
                if (!project.unifiedPushServerWar) {
                    throw new IllegalStateException("You must specify path to ag-push.war via unifiedPushServerWar property")
                }
                if (!project.unifiedPushAuthServerWar) {
                    throw new IllegalStateException("You must specify path to auth-server.war via unifiedAuthServerWar property")
                }
                if (project.unifiedpush.runMigrator && !project.unifiedPushMigratorDist) {
                    throw new IllegalStateException("You must specify path to migrator-dist.zip via unifiedPushMigratorDist property")
                }
                return true
            }
            isInstalled { false }
            postActions {

                // this will resolve migrate
                final agpushMigratorJarCoordinate = "org.jboss.aerogear.unifiedpush:unifiedpush-migrator:${project.unifiedPushModelVersion}"

                ConfigurableMavenResolverSystem resolver = Maven.configureResolver()
                        .withMavenCentralRepo(false)

                if(project.unifiedPushModelRepository) {
                    resolver.withRemoteRepo(
                        MavenRemoteRepositories.createRemoteRepository('remote_ups', project.unifiedPushModelRepository, 'default')
                    )
                }

                // copy files to directory where files to be deployed are stored
                Files.copy(
                        new File(project.unifiedPushServerWar),
                        new File(project.unifiedpush.binariesDir, "ag-push.war"))
                Files.copy(
                        new File(project.unifiedPushAuthServerWar),
                        new File(project.unifiedpush.binariesDir, 'auth-server.war'))

                // prepare migrator, we need to download both binary dist and changeset in jar
                if (project.unifiedpush.runMigrator) {
                    Spacelift.task(new File(project.unifiedPushMigratorDist), UnzipTool.class)
                            .toDir(new File(project.unifiedpush.binariesDir, 'migrator')).cutdirs().execute().await()
                    project.ant.chmod(dir: "${new File(project.unifiedpush.binariesDir, 'migrator/bin/').canonicalPath}", perm: "a+x", includes: "*")

                    Spacelift.task(resolver.resolve(agpushMigratorJarCoordinate).withoutTransitivity().asSingleFile(), UnzipTool.class)
                            .toDir(new File(project.unifiedpush.binariesDir, 'migrator')).execute().await()
                }
            }
            tools {
                migrator {
                    command {
                        return new CommandBuilder("${project.unifiedpush.binariesDir}/migrator/bin/ups-migrator")
                                .parameter("--logLevel=DEBUG")
                                .parameter("--changeLogFile=${project.unifiedpush.binariesDir}/migrator/liquibase/master.xml")
                    }
                }
            }
        }

        // we need to build desktop video recorder from sources as this component cannot be deployed to Maven Central
        // due to license constraints
        arquillianDesktopVideoRecorder {
            product 'arquillian-desktop-video-recorder'
            version '1.0.0.Beta1'
            remoteUrl 'https://github.com/arquillian/arquillian-recorder/archive/1.0.0.Beta1.zip'
            home 'arquillian-recorder'
            fileName 'arquillian-recorder.zip'
            isInstalled {
                return new File(project.spacelift.workspace, ".repository/org/arquillian/extension/arquillian-desktop-video-recorder/${version}").exists()
            }
            extractMapper { toDir(home).cutdirs() }
            postActions {
                Spacelift.task(MavenExecutor)
                        .pom("${arquillianDesktopVideoRecorder.home.absolutePath}/pom.xml")
                        .goals('clean', 'install')
                        .execute().await()
            }
        }
    }

    /* TESTS */

    tests {
        localIntegrationTests(from: LocalTestExecution) {

            database { project.unifiedpush.db }
            runMigrator { project.unifiedpush.runMigrator }
            unifiedPushBinariesDir { project.unifiedpush.binariesDir }
            jbossHome { project.container.home }
            jbossManagerConfiguration { project.container.configuration }
            ipVersion { project.ipVersion }
            localDomain { project.container.localDomain }
            bindAddress { project.container.bindAddress }
            truststore { project.spacelift.keystore.truststore }
            truststorePassword { project.spacelift.keystore.truststorePass }
            keystore { project.spacelift.keystore.keystore }
            keystorePassword { project.spacelift.keystore.keystorePass }
            apnsKeystore { project.unifiedpush.apnsCert }
            apnsKeystorePassword { project.spacelift.keystore.keystorePass }
            gcmCertificate { project.unifiedpush.gcmCert }
            gcmCertificateKey { project.unifiedpush.gcmKey }

            testModule { ':tests:integration' }
            protocols { project.protocols }
        }

        localAdminUITests(from: localIntegrationTests) {
            testModule { ':tests:admin-ui' }
        }
    }
}

// these elements are needed only if you are willing to use _testreport_ task
repositories {
    mavenCentral()
}

configurations {
    junitreport
}

dependencies {
    junitreport 'org.apache.ant:ant-junit:1.9.4'
}

// build dependencies
buildscript {
    repositories {
        mavenCentral()
        jcenter()
        // you need this only if you plan to use SNAPSHOT version of this plugin
        maven {
            name 'jboss-staging-repository-group'
            url 'https://repository.jboss.org/nexus/content/groups/staging'
        }
    }

    // We need to clean and build the rest-api module which is used as a buildscript dependency
    project.tasks.create("compile-rest-api", GradleBuild) {
        buildFile = '../build.gradle'
        tasks = [':tools:aerogear-ups-rest-api:clean', ':tools:aerogear-ups-rest-api:build']
        // When this is not set, it will create an infinite cycle
        startParameter.systemPropertiesArgs.put('spacelift.disable', 'true')
    }.execute()

    dependencies {
        classpath project(':tools:aerogear-ups-rest-api')
        classpath 'org.jboss.aerogear.test:spacelift-jboss-manager:0.10.0'
        classpath 'org.arquillian.spacelift.gradle:arquillian-spacelift-gradle:1.0.0-alpha-14'
        classpath 'com.jayway.restassured:rest-assured:2.4.0'
        classpath 'com.jayway.awaitility:awaitility-groovy:1.6.3'
        classpath 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'
        classpath "io.spring.gradle:dependency-management-plugin:0.5.0.RELEASE"
    }
}
