import com.google.common.io.Files
import com.jayway.awaitility.Awaitility
import com.jayway.restassured.RestAssured
import com.jayway.restassured.response.Response
import org.arquillian.spacelift.execution.Tasks
import org.arquillian.spacelift.gradle.*
import org.arquillian.spacelift.gradle.container.*
import org.arquillian.spacelift.gradle.git.*
import org.arquillian.spacelift.gradle.maven.*
import org.arquillian.spacelift.gradle.openshift.*
import org.arquillian.spacelift.process.CommandBuilder
import org.arquillian.spacelift.process.ProcessInteractionBuilder
import org.arquillian.spacelift.process.impl.CommandTool
import org.arquillian.spacelift.tool.basic.DownloadTool
import org.arquillian.spacelift.tool.io.WriteToFileTool
import org.jboss.aerogear.test.container.manager.ManagedContainerConfiguration
import org.jboss.aerogear.test.container.spacelift.*
import org.jboss.shrinkwrap.resolver.api.maven.ConfigurableMavenResolverSystem
import org.jboss.shrinkwrap.resolver.api.maven.Maven
import org.jboss.shrinkwrap.resolver.api.maven.repository.MavenRemoteRepositories

import java.util.concurrent.Callable
import java.util.concurrent.TimeUnit

apply plugin: 'spacelift'

ext {
    defaultOpenShiftAppName = 'upsintegrationtests'
    defaultOpenShiftNamespace = 'mobileqa'
    defaultOpenShiftGearSize = 'small'
    defaultOpenShiftUsername = ''
    defaultOpenShiftPassword = ''
    defaultOpenShiftAppDirectory = 'unified-push'
    defaultOpenShiftCartridge = 'https://raw.githubusercontent.com/jboss-mobile/jboss-unified-push-openshift-cartridge/master/metadata/manifest.yml'

    defaultUnifiedPushSource = 'repository'
    defaultUnifiedPushMavenRepository = 'http://dl.bintray.com/aerogear/AeroGear-UnifiedPush/'

    defaultEap6Version = '6.3.0'
    defaultEap6FileName = "jboss-eap-${defaultEap6Version}.zip"
    defaultEap6RemoteUrl = ''

    defaultProtocols = ['http']

    defaultUnifiedPushType = 'as7'
    defaultUnifiedPushServerWar = null
    defaultUnifiedPushAuthServerWar = null
    defaultUnifiedPushServerDatasource = null

    defaultJbossHome = null
    defaultJbossBindAddress = '127.0.0.1'
    defaultLocalDomain = '127.0.0.1'

    defaultExternalMavenParameters = ""

    defaultUnifiedPushBinariesDir = new File('upsBin')
}

spacelift {
    tools {
        rhc {
            command 'rhc'
        }
        mvn {
            command {
                def m2 = System.getenv("M2")
                def m2_home = System.getenv("M2_HOME")

                if (m2 != null && !m2.isEmpty()) {
                    return Tasks.prepare(CommandTool).command(new CommandBuilder("${m2}/mvn"))
                } else if (m2_home != null && !m2_home.isEmpty()) {
                    return Tasks.prepare(CommandTool).command(new CommandBuilder("${m2_home}/bin/mvn"))
                } else {
                    return Tasks.prepare(CommandTool).command(new CommandBuilder("mvn"))
                }
            }
        }
    }

    profiles {
        openshift {
            enabledInstallations 'littleProxy', 'aerogearTestingTools', 'unifiedPushServerOpenshift'
            tests 'openshiftIntegrationTests'
        }
        local {
            tests 'localIntegrationTests'
        }
        eap6(inherits: local) {
            enabledInstallations {
                ['littleProxy', 'aerogearTestingTools', 'eap6Container', "unifiedPushServer_${project.unifiedPushSource}"]
            }
        }
        wildfly8(inherits: local) {
            enabledInstallations {
                ['littleProxy', 'aerogearTestingTools', 'wildfly8Container', "unifiedPushServer_${project.unifiedPushSource}"]
            }
        }
        externalEap6(inherits: local) {
            enabledInstallations {
                ['littleProxy', 'aerogearTestingTools', "unifiedPushServer_${project.unifiedPushSource}"]
            }
        }
    }

    installations {
        littleProxy {
            product 'aerogear'
            version '1.1.0-beta1-SNAPSHOT'
            remoteUrl 'https://github.com/adamfisk/LittleProxy/archive/696e3a87a64e9ede019e68312e0c8f9674d1b2a8.zip'
            home 'littleproxy'
            fileName 'littleproxy.zip'
            extractMapper { toDir(home).cutdirs() }
            postActions {
                Tasks.prepare(CommandTool)
                        .workingDir('littleproxy')
                        .programName('mvn')
                        .parameters('clean', 'install')
                        .execute().await()
            }
        }

        aerogearTestingTools {
            product 'aerogear'
            version '1.0.2'
            remoteUrl 'https://github.com/aerogear/aerogear-testing-tools/archive/master.zip'
            home 'aerogear-testing-tools'
            fileName 'aerogear-testing-tools.zip'
            extractMapper { toDir(home).cutdirs() }
            forceReinstall true
            postActions {
                Tasks.prepare(CommandTool.class)
                        .workingDir('aerogear-testing-tools/unifiedpush-test-extension')
                        .programName('mvn')
                        .parameters('clean', 'package')
                        .interaction(new ProcessInteractionBuilder().when(".*").printToOut())
                        .execute().await()
            }
        }

        wildfly8Container {
            product { 'jboss' }
            version { '8.2.0' }
            fileName { 'wildfly-8.2.0.Final.zip' }
            remoteUrl { 'http://download.jboss.org/wildfly/8.2.0.Final/wildfly-8.2.0.Final.zip' }
            home { 'wildfly-8.2.0.Final' }
            extractMapper { toDir(home).cutdirs() }
            postActions {
                project.ant.chmod(dir: "${home}/bin", perm: "a+x", includes: "**/*.sh")

                project.jbossHome = home
                project.unifiedPushType = 'wildfly'
            }
        }

        eap6Container {
            product 'eap'
            version { project.eap6Version }
            fileName { project.eap6FileName }
            remoteUrl { project.eap6RemoteUrl }
            extractMapper { toDir(home).cutdirs() }
            postActions {
                project.ant.chmod(dir: "${home}/bin", perm: "a+x", includes: "**/*.sh")

                project.jbossHome = home
                project.unifiedPushType = 'as7'
            }
        }

        unifiedPushServerOpenshift {
            product 'aerogear'
            version '1.0.2'
            postActions {
                def repository = File.createTempDir()
                println "Created temporary directory: $repository."

                println 'Creating OpenShift cartridge.'
                Tasks.prepare(CreateOpenshiftCartridge)
                        .named(project.openShiftAppName)
                        .at(project.openShiftNamespace)
                        .sized(project.openShiftGearSize)
                        .username(project.openShiftUsername)
                        .password(project.openShiftPassword)
                        .cartridges(project.openShiftCartridge)
                        .force()
                        .checkout()
                        .repo(repository.absolutePath)
                        .execute().await()

                def deployFile = "mv ~/app-root/repo/unifiedpush-test-extension-server.war ~/${project.openShiftAppDirectory}/standalone/deployments/unifiedpush-test-extension-server.war"

                def actionHooksDir = new File(repository, '.openshift/action_hooks/')
                actionHooksDir.mkdirs()

                List<File> addedFiles = Tasks.prepare(WriteToFileTool)
                        .write(deployFile)
                        .to(new File(actionHooksDir, 'deploy'))
                        .execute().await()

                def warFileSource = new File('aerogear-testing-tools/unifiedpush-test-extension/unifiedpush-test-extension-server/target/unifiedpush-test-extension-server.war')
                def warFileTarget = new File(repository, 'unifiedpush-test-extension-server.war')

                Files.copy(warFileSource, warFileTarget)

                Tasks.chain(repository, GitAddTool)
                        .add(addedFiles)
                        .add(warFileTarget)
                        .execute().await()

                addedFiles.each { addedFile ->
                    Tasks.prepare(CommandTool.class)
                            .workingDir(repository.absolutePath)
                            .programName('git')
                            .parameters('update-index', '--chmod=+x', addedFile.absolutePath)
                            .interaction(new ProcessInteractionBuilder().when(".*").printToOut())
                            .execute().await()
                }

                println 'Pushing the unifiedpush-test-extension-server.war into the repository.'
                Tasks.chain(repository, GitCommitTool)
                        .message('Add test extension war.')
                        .then(GitPushTool)
                        .execute().await()

                final String baseUri = "https://${project.openShiftAppName}-${project.openShiftNamespace}.rhcloud.com/unifiedpush-test-extension-server"

                println 'Waiting for unifiedpush-test-extension-server to be deployed. (max 5 minutes)'
                println "Expected deployment url: $baseUri"
                Awaitility.await().atMost(5, TimeUnit.MINUTES).pollInterval(5, TimeUnit.SECONDS).until(new Callable<Boolean>() {
                    @Override
                    Boolean call() throws Exception {
                        Response response = RestAssured.given()
                                .baseUri(baseUri)
                                .get('/status')

                        return response.statusCode == 200
                    }
                })
                println 'The unifiedpush-test-extension-server.war was successfully deployed.'

                println 'Reconfiguring KeyCloak.'
                RestAssured.given()
                        .baseUri(baseUri)
                        .get('/keycloak')
                        .then()
                        .log().all(true)
                        .statusCode(200)

                println 'Restaring the cartridge.'
                GradleSpacelift.tools('rhc')
                        .parameters('app', 'restart')
                        .parameters('-a', project.openShiftAppName)
                        .parameters('-n', project.openShiftNamespace)
                        .parameters('-l', project.openShiftUsername)
                        .parameters('-p', project.openShiftPassword)
                        .execute().await()

                println 'Waiting for unifiedpush-test-extension-server to be deployed. (max 5 minutes)'
                println "Expected deployment url: $baseUri"
                Awaitility.await().atMost(5, TimeUnit.MINUTES).pollInterval(5, TimeUnit.SECONDS).until(new Callable<Boolean>() {
                    @Override
                    Boolean call() throws Exception {
                        Response response = RestAssured.given()
                                .baseUri(baseUri)
                                .get('/status')

                        return response.statusCode == 200
                    }
                })
                println 'The unifiedpush-test-extension-server.war was successfully deployed.'

            }
        }

        unifiedPushServer_repository {
            product 'aerogear'
            version '1.0.2'
            remoteUrl 'https://github.com/aerogear/aerogear-unifiedpush-server/archive/1.0.2.zip'
            home 'aerogear-unifiedpush-server'
            fileName 'aerogear-unifiedpush-server.zip'
            extractMapper { toDir(home).cutdirs() }
            forceReinstall true
            postActions {
                Tasks.prepare(CommandTool.class)
                        .workingDir('aerogear-unifiedpush-server')
                        .programName('mvn')
                        .parameters('clean', 'package', '-DskipTests', '-Dmaven.javadoc.skip=true')
                        .interaction(new ProcessInteractionBuilder().when(".*").printToOut())
                        .execute().await()

                project.unifiedPushBinariesDir.mkdirs()

                Tasks.prepare(DownloadTool.class)
                        .from('https://raw.githubusercontent.com/aerogear/aerogear-unifiedpush-server/master/databases/unifiedpush-h2-ds.xml')
                        .to(new File(project.unifiedPushBinariesDir, 'unifiedpush-h2-ds.xml'))
                        .execute().await()

                Files.copy(
                        new File('aerogear-unifiedpush-server/servers/auth-server/target/auth-server.war'),
                        new File(project.unifiedPushBinariesDir, 'auth-server.war'))

                Files.copy(
                        new File('aerogear-unifiedpush-server/servers/ups-as7/target/ag-push.war'),
                        new File(project.unifiedPushBinariesDir, 'as7-ag-push.war'))

                Files.copy(
                        new File('aerogear-unifiedpush-server/servers/ups-wildfly/target/ag-push.war'),
                        new File(project.unifiedPushBinariesDir, 'wildfly-ag-push.war'))


            }
        }

        unifiedPushServer_maven {
            product 'aerogear'
            version '1.0.2'
            postActions {
                final authServerCanonicalCoordinate = "org.jboss.aerogear.unifiedpush:unifiedpush-auth-server:war:${version}"
                final upsAs7CanonicalCoordinate = "org.jboss.aerogear.unifiedpush:unifiedpush-server-as7:war:${version}"
                final upsWildFlyCanonicalCoordinate = "org.jboss.aerogear.unifiedpush:unifiedpush-server-wildfly:war:${version}"

                ConfigurableMavenResolverSystem resolver = Maven.configureResolver()
                    .withRemoteRepo(MavenRemoteRepositories
                        .createRemoteRepository('remote_ups', project.unifiedPushMavenRepository, 'default'))
                    .withMavenCentralRepo(false)

                project.unifiedPushBinariesDir.mkdirs()

                Tasks.prepare(DownloadTool.class)
                        .from('https://raw.githubusercontent.com/aerogear/aerogear-unifiedpush-server/master/databases/unifiedpush-h2-ds.xml')
                        .to(new File(project.unifiedPushBinariesDir, 'unifiedpush-h2-ds.xml'))
                        .execute().await()

                Files.copy(
                        resolver.resolve(authServerCanonicalCoordinate).withoutTransitivity().asSingleFile(),
                        new File(project.unifiedPushBinariesDir, 'auth-server.war'))

                Files.copy(
                        resolver.resolve(upsAs7CanonicalCoordinate).withoutTransitivity().asSingleFile(),
                        new File(project.unifiedPushBinariesDir, 'as7-ag-push.war'))

                Files.copy(
                        resolver.resolve(upsWildFlyCanonicalCoordinate).withoutTransitivity().asSingleFile(),
                        new File(project.unifiedPushBinariesDir, 'wildfly-ag-push.war'))
            }
        }

        /**
         * Purpose of this is to enable running against previously downloaded wars.
         */
        unifiedPushServer_none {
            product 'aerogear'
            version '1.0.2'
            postActions {
                project.unifiedPushBinariesDir.mkdirs()

                if(project.unifiedPushServerWar != null) {
                    Files.copy(
                            new File(project.unifiedPushServerWar),
                            new File(project.unifiedPushBinariesDir, "${project.unifiedPushType}-ag-push.war")
                    )
                }
                if(project.unifiedPushAuthServerWar != null) {
                    Files.copy(
                            new File(project.unifiedPushAuthServerWar),
                            new File(project.unifiedPushBinariesDir, 'auth-server.war')
                    )
                }
                if(project.unifiedPushServerDatasource != null) {
                    Files.copy(
                            new File(project.unifiedPushServerDatasource),
                            new File(project.unifiedPushBinariesDir, 'unifiedpush-h2-ds.xml')
                    )
                }
            }
        }

        deployUnifiedPushToContainer {
            product 'aerogear'
            version '1.0.2'
            postActions {
                project.unifiedPushType
            }
        }
    }

    tests {
        openshiftIntegrationTests {
            execute {
                def baseUri = "$https://${project.openShiftAppName}-${project.openShiftNamespace}.rhcloud.com:443";

                Tasks.prepare(MavenExecutor).pom("pom.xml")
                        .profile('openshift')
                        .property("http.ignore=true")
                        .property("containerUri=$baseUri")
                        .property("keystore.ignore=true")
                        .goals('clean', 'test').execute().await()
            }
        }
        localIntegrationTests {
            dataProvider {
                project.protocols
            }
            beforeSuite {
                def jbossHome = project.jbossHome
                if(jbossHome instanceof CharSequence) {
                    jbossHome = new File(jbossHome)
                }
                final def baseUri = "http://${project.localDomain}:8080/unifiedpush-test-extension-server"

                // Remove all current deployments
                File deployments = new File(jbossHome, 'standalone/deployments');
                deployments.listFiles().each { file ->
                    file.delete()
                }

                Files.copy(
                        new File(project.unifiedPushBinariesDir, 'unifiedpush-h2-ds.xml'),
                        new File(deployments, 'unifiedpush-h2-ds.xml'))

                Files.copy(
                        new File(project.unifiedPushBinariesDir, 'auth-server.war'),
                        new File(deployments, 'auth-server.war'))

                Files.copy(
                        new File(project.unifiedPushBinariesDir, "${project.unifiedPushType}-ag-push.war"),
                        new File(deployments, 'ag-push.war'))

                Files.copy(
                        new File('aerogear-testing-tools/unifiedpush-test-extension/unifiedpush-test-extension-server/target/unifiedpush-test-extension-server.war'),
                        new File(deployments, 'unifiedpush-test-extension-server.war'))

                project.ext.jbossManager = Tasks.prepare(JBossStarter)
                        .configuration(
                        new ManagedContainerConfiguration()
                                .setJbossHome(jbossHome.absolutePath)
                                .setJavaVmArguments("-Djboss.bind.address=${project.jbossBindAddress}")
                                .setStartupTimeoutInSeconds(600))
                        .execute().await()

                println 'Waiting for unifiedpush-test-extension-server to be deployed. (max 5 minutes)'
                println "Expected deployment url: $baseUri"
                Awaitility.await().atMost(5, TimeUnit.MINUTES).pollInterval(5, TimeUnit.SECONDS).until(new Callable<Boolean>() {
                    @Override
                    Boolean call() throws Exception {
                        Response response = RestAssured.given()
                                .baseUri(baseUri)
                                .get('/status')

                        return response.statusCode == 200
                    }
                })
                println 'The unifiedpush-test-extension-server.war was successfully deployed.'

                println 'Reconfiguring KeyCloak.'
                RestAssured.given()
                        .baseUri(baseUri)
                        .get('/keycloak')
                        .then()
                        .log().all(true)
                        .statusCode(200)

                println 'Restarting container.'
                Tasks.chain(project.jbossManager, JBossStopper).execute().await()

                project.ext.jbossManager = Tasks.prepare(JBossStarter)
                        .configuration(
                        new ManagedContainerConfiguration()
                                .setJbossHome(jbossHome.absolutePath)
                                .setJavaVmArguments("-Djboss.bind.address=${project.jbossBindAddress}")
                                .setStartupTimeoutInSeconds(600))
                        .execute().await()

                println 'Waiting for unifiedpush-test-extension-server to be deployed. (max 5 minutes)'
                println "Expected deployment url: $baseUri"
                Awaitility.await().atMost(5, TimeUnit.MINUTES).pollInterval(5, TimeUnit.SECONDS).until(new Callable<Boolean>() {
                    @Override
                    Boolean call() throws Exception {
                        Response response = RestAssured.given()
                                .baseUri(baseUri)
                                .get('/status')

                        return response.statusCode == 200
                    }
                })
                println 'The unifiedpush-test-extension-server.war was successfully deployed.'
            }
            execute { protocol ->
                def port = protocol == 'https' ? 8443 : 8080
                def baseUri = "$protocol://${project.localDomain}:$port"

                println "Using external maven parameters: ${project.externalMavenParameters}"

                GradleSpacelift.tools('mvn')
                    .parameters('-Popenshift', "-DcontainerUri=$baseUri", 'clean', 'test')
                    .parameters(new CommandBuilder('unused').splitToParameters(project.externalMavenParameters).build().getParameters())
                    .execute().await()

                /*Tasks.prepare(MavenExecutor).pom("pom.xml")
                        .profile('openshift')
                        .property("containerUri=$baseUri")
                        .goals('clean', 'test')
                        .execute().await()*/
            }
            afterSuite {
                Tasks.chain(project.jbossManager, JBossStopper).execute().await()
            }
        }
    }
}

// build dependencies
buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        // you need this only if you plan to use SNAPSHOT version of this plugin
        maven {
            name 'jboss-staging-repository-group'
            url 'https://repository.jboss.org/nexus/content/groups/staging'
        }
    }
    dependencies {
        classpath 'org.arquillian.spacelift.gradle:arquillian-spacelift-gradle:1.0.0-alpha-5'
        classpath 'com.jayway.restassured:rest-assured:2.4.0'
        classpath 'com.jayway.awaitility:awaitility-groovy:1.6.2'
    }
}

// these elements are needed only if you are willing to use _testreport_ task
repositories {
    mavenCentral()
}

configurations {
    junitreport
}

dependencies {
    junitreport 'org.apache.ant:ant-junit:1.9.4'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.2'
}