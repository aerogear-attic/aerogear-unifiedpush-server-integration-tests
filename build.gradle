import com.google.common.io.Files
import com.jayway.awaitility.Awaitility
import com.jayway.restassured.RestAssured
import com.jayway.restassured.response.Response
import org.arquillian.spacelift.Spacelift;
import org.arquillian.spacelift.gradle.*
import org.arquillian.spacelift.gradle.android.*
import org.arquillian.spacelift.gradle.arquillian.*
import org.arquillian.spacelift.gradle.certs.*
import org.arquillian.spacelift.gradle.container.*
import org.arquillian.spacelift.gradle.container.db.*
import org.arquillian.spacelift.gradle.container.db.module.*
import org.arquillian.spacelift.gradle.git.*
import org.arquillian.spacelift.gradle.gradle.*
import org.arquillian.spacelift.gradle.maven.*
import org.arquillian.spacelift.gradle.openshift.*
import org.arquillian.spacelift.gradle.quickstart.*
import org.arquillian.spacelift.gradle.text.ProcessTemplate
import org.arquillian.spacelift.gradle.utils.*
import org.arquillian.spacelift.gradle.cordova.CordovaExecutor
import org.arquillian.spacelift.process.CommandBuilder
import org.arquillian.spacelift.process.ProcessInteractionBuilder
import org.arquillian.spacelift.process.ProcessResult
import org.arquillian.spacelift.task.InvalidTaskException
import org.arquillian.spacelift.task.archive.*
import org.arquillian.spacelift.task.os.CommandTool
import org.arquillian.spacelift.task.net.*
import org.arquillian.spacelift.task.io.*
import org.arquillian.spacelift.task.io.WriteToFileTool
import org.jboss.aerogear.unifiedpush.api.*
import org.jboss.aerogear.test.container.manager.JBossManagerConfiguration
import org.jboss.aerogear.test.container.manager.configuration.ContainerType
import org.jboss.aerogear.test.container.spacelift.*
import org.jboss.aerogear.test.Session
import org.jboss.aerogear.test.api.auth.*
import org.jboss.aerogear.test.api.application.*
import org.jboss.aerogear.test.api.variant.android.*
import org.jboss.shrinkwrap.resolver.api.ResolutionException
import org.jboss.shrinkwrap.resolver.api.maven.ConfigurableMavenResolverSystem
import org.jboss.shrinkwrap.resolver.api.maven.Maven
import org.jboss.shrinkwrap.resolver.api.maven.repository.MavenRemoteRepositories
import groovy.json.JsonOutput

import java.nio.file.attribute.PosixFilePermission
import java.nio.file.FileSystems
import java.util.Collections
import java.util.EnumSet
import java.util.concurrent.Callable
import java.util.concurrent.TimeUnit

apply plugin: 'spacelift'

ext {
    
    defaultOpenShiftAppName = 'upsintegrationtests'
    defaultOpenShiftAppNameAdminUI = 'upsadminui'
    defaultOpenShiftAppNameQuickstarts = 'quickstarts'
    defaultOpenShiftNamespace = 'mobileqa'
    defaultOpenShiftGearSize = 'medium'
    defaultOpenShiftUsername = ''
    defaultOpenShiftPassword = ''
    defaultOpenShiftAppDirectory = 'unified-push'
    defaultOpenShiftCartridge = 'https://raw.githubusercontent.com/jboss-mobile/jboss-unified-push-openshift-cartridge/master/metadata/manifest.yml'
    defaultOpenShiftRecreate = 'true'

    defaultUnifiedPushModelRepository = null
    defaultUnifiedPushModelVersion = '1.0.3'
    defaultUnifiedPushTestExtensionVersion = '1.0.3-SNAPSHOT'
    defaultIpVersion = 'IPv4'


    defaultUnifiedPushMavenRepository = 'https://repository.jboss.org/nexus/content/groups/staging'

    defaultEap6Version = '6.3.3'
    defaultEap6RemoteUrl = ''

    defaultProtocols = [ 'https' ]
    defaultBrowser = 'firefox'

    // We need to exclude APNS and GCMforChrome until it is fixed in proxy.
    // If there is problem, you can exclude category.GCM as well
    defaultExternalMavenParameters = "excludedGroups=category.AdminUI,category.Performance,category.ChromePackagedApp"

    // Hello World quickstart related
    defaultGoogleProjectNumber = ''
    defaultGoogleKey = ''
    defaultQuickstartPushApplicationId = ''
    defaultQuickstartPushApplicationMasterSecret = ''

    // Shoot&Share quickstart related
    defaultShootAndShareGoogleClientId = ''
    defaultShootAndShareFacebookClientId = ''
    defaultShootAndShareFacebookClientSecret = ''
    defaultFacebookEmail = ''
    defaultFacebookPassword = ''

    // FIXME these object are used to persist states in between installations as we don't have better model
    // container related configuration
    // you should pass jbossHome iff you want to use externally prepared container
    container = [
        home: project.hasProperty('jbossHome') ? new File(project.jbossHome) : null,
        configuration: new JBossManagerConfiguration()
                        .setContainerType(ContainerType.EAP)
                        .setStartupTimeoutInSeconds(300),
        bindAddress: project.hasProperty('jbossBindAddress') ? project.jbossBindAddress : '127.0.0.1',
        localDomain: project.hasProperty('localDomain') ? project.localDomain : '127.0.0.1'
    ]

    // unified push related configuration
    unifiedpush = [
        type: 'as7',
        binariesDir: new File(project.rootDir, 'spacelift/upsBin'),
        datasource: project.hasProperty('datasource') ? project.datasource : null,
        db: [
            jdbc_url: project.hasProperty('dbJdbc_url') ? project.dbJbdc_url : 'jdbc:mysql://localhost:3306/unifiedpush?useUnicode=true&characterEncoding=UTF-8',
            username: project.hasProperty('dbUsername') ? project.dbUsername : 'unifiedpush',
            password: project.hasProperty('dbPassword') ? project.dbPassword : 'unifiedpush',
            driver: project.hasProperty('dbDriver') ? project.dbDriver: 'com.mysql.jdbc.Driver'
        ],
        runMigrator: project.hasProperty('runMigrator') ? Boolean.parseBoolean(project.runMigrator) : true,
        // TODO spacelift.workspace is not yet available here
        apnsCert: new File(project.rootDir, 'spacelift/workspace/certs/apns_server.jks'),
        gcmCert: new File(project.rootDir, 'spacelift/workspace/certs/gcm_mock.crt'),
        gcmKey: new File(project.rootDir, 'spacelift/workspace/certs/gcm_mock.key')
    ]

}

spacelift {
    workspace = new File(project.rootDir, 'spacelift/workspace')
    installationsDir = new File(project.rootDir, 'spacelift/cache')

    tools {
        rhc {
            command 'rhc'
        }
        keytool {
            command 'keytool'
        }
    }

    profiles {

        // dynamically create profiles for combination of container type and ups source
        // containers
        ['wildfly8', 'eap6', 'any', 'openshift'].each { String container ->
            // ups installations
            ['upsProvided', 'upsFromSource', 'upsFromMavenRepository', 'upsFromCart'].each { String ups ->

                def profileName = "${container}${ups.capitalize()}"

                // openshift is valid only from cart
                if((container=='openshift' && ups != 'upsFromCart') || (container!='openshift' && ups == 'upsFromCart') ) {
                    return true;
                }
                // order installations, container must be installed prior ups and aerogearTestingTools as latest
                def _installations = [ 'keystore', 'maven']
                if(container != 'openshift') {
                    _installations << "${container}Container"
                }

                // add datasource installation
                switch(project.unifiedpush.datasource) {
                    case "mysql":
                    case "postgresql":
                        logger.warn(":init:Profile ${profileName} will trigger ${project.unifiedpush.datasource} datasource installation")
                        _installations << project.unifiedpush.datasource
                        break
                    default:
                        logger.warn(":init:Profile ${profileName} will not trigger datasource installation")

                }

                _installations += ['littleProxy', 'unifiedPushServerModel', 'aerogearTestingTools', ups]
                def _tests = container!='openshift' ? ['localIntegrationTests'] : ['openshiftIntegrationTests']

                // dynamically create profile with name e.g. wildfly8UpsProvided
                create (profileName, [:], DeferredValue.of(Void.class).ownedBy(this).from {
                    enabledInstallations _installations
                    tests _tests
                })
            }
        }

        helloWorldCordovaQuickstart {
            enabledInstallations 'maven', 'littleProxy', 'unifiedPushServerModel', 'aerogearTestingTools', 'androidSdk', 'unifiedPushServerQuickstarts', 'helloWorldCordovaQuickstart'
            tests 'helloWorldCordovaQuickstart'
        }

        shootAndShareCordovaQuickstart {
            enabledInstallations 'maven', 'shootAndShareAndroidSdk', 'gradle112', 'shootAndShareCordovaQuickstart'
            tests 'shootAndShareCordovaQuickstart'
        }

        adminUIOpenshift  {
            enabledInstallations 'keystore', 'maven', 'littleProxy', 'unifiedPushServerModel', 'aerogearTestingTools', 'unifiedPushServerAdminUI', 'arquillianDesktopVideoRecorder'
            tests 'openshiftAdminUITests'
        }
    }

    installations {
        maven {
            product 'maven'
            version '3.2.5'
            remoteUrl "http://www.eu.apache.org/dist/maven/maven-3/${version}/binaries/apache-maven-${version}-bin.zip"
            home 'maven'            
            extractMapper { toDir(home).cutdirs() }
            tools {
                mvn {
                    command {
                        def quietParameters = System.getenv("TRAVIS") != null ? ["-B", "-q"] : []
                        def mavenPath = "${maven.home}/bin/mvn" + (EnvironmentUtils.runsOnWindows() ? ".bat" : "")
                        return new CommandBuilder(mavenPath).parameters(quietParameters)
                    }
                }
            }
            postActions {
                project.ant.chmod(dir: "${home}/bin", perm: "a+x", includes: "**/mvn")
            }
        }
        
        gradle112(from:GradleInstallation) {
            version { "1.12" }
            alias { "gradle112" }
            environment {
                [
                    "ANDROID_HOME" : androidSdk.home.canonicalPath,
                    "ANDROID_SDK_HOME" : androidSdk.home.parentFile.canonicalPath
                ]
            }
        }

        // installs keystore
        keystore(from:KeystoreInstallation) {
            isInstalled {
                // we need to delete keystore/truststore later updates - apns cert generation needs to be regenerated
                // and put into truststore - hence fresh truststore is needed
                // as a side effect, this call will also remove any existing project.unifiedpush.apnsCert file
                project.ant.delete(dir: "${home.canonicalPath}")
                return false
            }
        }

        // install UPS model, required for UPS REST API
        unifiedPushServerModel {
            product 'aerogear'
            version { project.unifiedPushModelVersion }
            remoteUrl 'https://github.com/aerogear/aerogear-unifiedpush-server/archive/1.0.3.zip'
            home 'aerogear-unifiedpush-server-pre-release'
            extractMapper { toDir(home).cutdirs() }
            // trigger installation only if model is not already in the repository
            isInstalled {
                // if there is additional Maven repository, add it there
                if(project.unifiedPushModelRepository != null) {
                    Spacelift.task(SettingsXmlUpdater)
                            .repository("external-repository", project.unifiedPushModelRepository, false)
                            .execute().await()
                }

                try {
                    final String modelCoordinates = "org.jboss.aerogear.unifiedpush:unifiedpush-model-jpa:${version}"
                    Maven.configureResolver()
                        .fromFile(new File(project.spacelift.workspace, "settings.xml"))
                        .resolve(modelCoordinates).withoutTransitivity().asSingleFile()
                    return true
                }
                catch(ResolutionException e) {
                    return false
                }
            }
            postActions {
                // install parent as prerequite to installing model
                Spacelift.task(MavenExecutor).pom('pom.xml')
                        .workingDir(home.absolutePath)
                        .withoutSubprojects()
                        .goals('clean', 'install')
                        .properties( 'skipTests', 'maven.javadoc.skip=true')
                        .execute().await()

                // install model
                Spacelift.task(MavenExecutor).pom('model/pom.xml')
                        .workingDir(home.absolutePath)
                        .goals('clean', 'install')
                        .properties( 'skipTests', 'maven.javadoc.skip=true')
                        .execute().await()
            }
        }

        littleProxy {
            product 'aerogear'
            version '1.1.0-beta-1-SNAPSHOT'
            remoteUrl 'https://github.com/adamfisk/LittleProxy/archive/696e3a87a64e9ede019e68312e0c8f9674d1b2a8.zip'
            home 'littleproxy'
            isInstalled {
                return new File(project.spacelift.workspace, ".repository/org/littleshoot/littleproxy/${version}").exists()
            }
            fileName 'littleproxy.zip'
            extractMapper { toDir(home).cutdirs() }
            postActions {
                Spacelift.task(MavenExecutor)
                        .pom("${littleProxy.home.absolutePath}/pom.xml")
                        .goals('clean', 'install')
                        .execute().await()
            }
        }

        aerogearTestingTools {

            def testExtensionWar = new File(project.unifiedpush.binariesDir, 'unifiedpush-test-extension-server.war')
            home { new File(project.rootDir, 'tools') }
            // FIXME, there should be better condition - the problem is that we need rebuild if ups location is switched
            isInstalled false
            postActions {
                // Install UPS REST API using specific UPS model
                Spacelift.task(MavenExecutor)
                        .pom("${home.absolutePath}/aerogear-ups-rest-api/pom.xml")
                        .property("aerogear.unifiedpush-server-model.version=${project.unifiedPushModelVersion}")
                        .goals('clean', 'install')
                        .execute().await()

                // Install test extension using specific UPS model
                Spacelift.task(MavenExecutor)
                    .pom("${home.absolutePath}/unifiedpush-test-extension/pom.xml")
                    .property("aerogear.version=${project.unifiedPushModelVersion}")
                    .goals('clean', 'install')
                    .execute().await()

                project.ant.mkdir(dir: project.unifiedpush.binariesDir)
                Files.copy(
                        new File(home, 'unifiedpush-test-extension/unifiedpush-test-extension-server/target/unifiedpush-test-extension-server.war'),
                        testExtensionWar)

                // update truststore with certificate and push certs to a convenient location
                Files.copy(new File(home, 'unifiedpush-test-extension/sslcert/gcm_mock.crt'), project.unifiedpush.gcmCert)
                Files.copy(new File(home, 'unifiedpush-test-extension/sslcert/gcm_mock.key'), project.unifiedpush.gcmKey)
                CertificateGenerator certificateGenerator = Spacelift.task(CertificateGenerator)
                        .apnsCertificate(project.unifiedpush.apnsCert)
                        .gcmCertificate(project.unifiedpush.gcmCert)
                        // update existing keystore
                        .trustStore(keystore.truststore)
                        .commonName(project.container.localDomain)

                certificateGenerator.execute().await()
            }
        }


        wildfly8Container {
            product { 'jboss' }
            version { '8.2.0' }
            fileName { 'wildfly-8.2.0.Final.zip' }
            remoteUrl { 'http://download.jboss.org/wildfly/8.2.0.Final/wildfly-8.2.0.Final.zip' }
            home { 'wildfly-8.2.0.Final' }
            extractMapper { toDir(home).cutdirs() }
            isInstalled {
                // FIXME this is abusing of isInstalled closure, this should be defined in profile when available
                project.container.configuration.setContainerType(ContainerType.WILDFLY)
                project.container.home = home
                project.unifiedpush.type = 'wildfly'

                // There seems to be an error on subsequent runs with the keycloak-default persistence unit
                // so we reinstall each time.
                return false
            }
            postActions {
                project.ant.chmod(dir: "${home}/bin", perm: "a+x", includes: "**/*.sh")

                // enable https
                File scriptTemplate = new File(project.rootDir, "setup/enable_https-${project.unifiedpush.type}.cli")
                Spacelift.task(scriptTemplate, ProcessTemplate.class).bindings(
                        [
                                alias           : keystore.alias,
                                keyPassword     : keystore.keystorePass,
                                keystorePassword: keystore.keystorePass,
                                keystore        : keystore.keystore.canonicalPath,
                                truststore      : keystore.truststore
                        ]).then(UpdateJBossConfig.class).shouldStartContainer().jbossHome(project.container.home).execute().await()
            }
        }

        eap6Container {
            product 'eap'
            version { project.eap6Version }
            remoteUrl { project.eap6RemoteUrl }
            extractMapper { toDir(home).cutdirs() }
            home { "jboss-eap-${version}" }
            preconditions {
                if(!project.eap6RemoteUrl) {
                    throw new IllegalStateException("You must specify url to download EAP distribution via eap6RemoteUrl property")
                }
                return true
            }
            isInstalled {

                // FIXME this is abusing of isInstalled closure, this should be defined in profile when available
                project.container.home = home
                project.container.configuration.setContainerType(ContainerType.EAP)
                project.unifiedpush.type = 'as7'

                // reinstall container every time
                return false
            }
            postActions {
                project.ant.chmod(dir: "${home}/bin", perm: "a+x", includes: "**/*.sh")

                // enable https
                File scriptTemplate = new File(project.rootDir, "setup/enable_https-${project.unifiedpush.type}.cli")
                Spacelift.task(scriptTemplate, ProcessTemplate.class).bindings(
                        [
                                alias           : keystore.alias,
                                keyPassword     : keystore.keystorePass,
                                keystorePassword: keystore.keystorePass,
                                keystore        : keystore.keystore.canonicalPath,
                                truststore      : keystore.truststore
                        ]).then(UpdateJBossConfig.class).shouldStartContainer().jbossHome(project.container.home).execute().await()
            }
        }

        // this is used to use already existing and preconfigured container
        anyContainer {
            product 'unused'
            version 'unused'
            preconditions {
                if(!project.container.home) {
                    throw new IllegalStateException("You must specify 'jbossHome' with path to home of your container")
                }

                if(!project.container.bindAddress) {
                    throw new IllegalStateException("You must specify 'jbossBindAddress' with ip address")
                }
                if(!project.container.localDomain) {
                    throw new IllegalStateException("You must specify 'localDomain' with ip address")
                }
                return true
            }
            isInstalled false
            postActions {
                // enable https
                File scriptTemplate = new File(project.rootDir, "setup/enable_https-${project.unifiedpush.type}.cli")
                Spacelift.task(scriptTemplate, ProcessTemplate.class).bindings(
                        [
                                alias           : keystore.alias,
                                keyPassword     : keystore.keystorePass,
                                keystorePassword: keystore.keystorePass,
                                keystore        : keystore.keystore.canonicalPath,
                                truststore      : keystore.truststore
                        ]).then(UpdateJBossConfig.class).shouldStartContainer().jbossHome(project.container.home).execute().await()
            }
        }

        // mysql installation in valid only if container was installed
        mysql {
            product 'unused'
            version 'unused'
            isInstalled false
            postActions {
                // install module
                new MySQLDatabaseModule('com.mysql.jdbc', project.container.home)
                        .shouldStartContainer()
                        .version('5.1.18')
                        // FIXME it would be better to uninstall it first
                        .install()

                // install datasource
                File scriptTemplate = new File(project.rootDir, "setup/mysql-${project.unifiedpush.type}.cli")
                Spacelift.task(scriptTemplate, ProcessTemplate.class).bindings(project.unifiedpush)
                        .then(UpdateJBossConfig.class).jbossHome(project.container.home).shouldStartContainer().execute().await()
            }
        }

        // postgres installation is valid only if container was installed
        postgresql {
            product 'unused'
            version 'unused'
            isInstalled false
            postActions {
                // install module
                new PostgreSQLDatabaseModule('org.postgresql', project.container.home)
                        .shouldStartContainer()
                // FIXME it would be better to uninstall it first
                        .install()

                // install datasource
                File scriptTemplate = new File(project.rootDir, "setup/postgresql-${project.unifiedpush.type}.cli")
                Spacelift.task(scriptTemplate, ProcessTemplate.class).bindings(project.unifiedpush)
                        .then(UpdateJBossConfig.class).jbossHome(project.container.home).shouldStartContainer().execute().await()
            }
        }

        unifiedPushServerOpenshiftWithoutProxy(from:UPSOpenShiftInstallation) {
            openShiftUsername { project.openShiftUsername }
            openShiftPassword { project.openShiftPassword }
            openShiftRepository { File.createTempDir() }
            openShiftCartridges { [ project.openShiftCartridge ] }
            openShiftAppDirectory { project.openShiftAppDirectory }
            openShiftGearSize { project.openShiftGearSize }
            openShiftNamespace { project.openShiftNamespace }

            unifiedPushTestExtensionVersion { project.unifiedPushTestExtensionVersion }
            aerogearGcmMockCertificate { new File(aerogearTestingTools.home, 'unifiedpush-test-extension/sslcert/gcm_mock.crt') }
            aerogearGcmMockKey { new File(aerogearTestingTools.home, 'unifiedpush-test-extension/sslcert/gcm_mock.key') }
            isInstalled {
                project.openShiftRecreate == 'false'
            }
        }

        upsFromCart(inherits:unifiedPushServerOpenshiftWithoutProxy) {
            turnProxyOn { true }
        }

        unifiedPushServerQuickstarts(inherits:unifiedPushServerOpenshiftWithoutProxy) {
            openShiftAppName { project.openShiftAppNameQuickstarts }
        }

        unifiedPushServerAdminUI(inherits:unifiedPushServerOpenshiftWithoutProxy) {
            openShiftAppName { project.openShiftAppNameAdminUI } 
        }

        upsFromSource {
            product 'aerogear'
            version '1.0.3'
            isInstalled false
            remoteUrl 'https://github.com/aerogear/aerogear-unifiedpush-server/archive/1.0.x.zip'
            home 'aerogear-unifiedpush-server'
            extractMapper { toDir(home).cutdirs() }
            postActions {
                Spacelift.task(MavenExecutor).pom('pom.xml')
                        .workingDir(home.absolutePath)
                        .goals('clean', 'package')
                        .properties( 'skipTests', 'maven.javadoc.skip=true')
                        .execute().await()

                // copy files to directory where files to be deployed are stored
                Files.copy(
                        new File(home, 'servers/auth-server/target/auth-server.war'),
                        new File(project.unifiedpush.binariesDir, 'auth-server.war'))
                Files.copy(
                        new File(home, "servers/ups-${project.unifiedpush.type}/target/ag-push.war"),
                        new File(project.unifiedpush.binariesDir, 'ag-push.war'))

                // prepare migrator
                if(project.unifiedpush.runMigrator) {
                    List<String> migratorDist = new FileNameFinder().getFileNames(new File(home, "migrator/target").canonicalPath, "*.zip")
                    if (migratorDist == null || migratorDist.size() != 1) {
                        throw new IllegalStateException("Expecting migrator dist in migrator/target directory")
                    }
                    Spacelift.task(new File("${migratorDist[0]}"), UnzipTool.class)
                            .toDir(new File(project.unifiedpush.binariesDir, 'migrator')).cutdirs().execute().await()
                    project.ant.chmod(dir: "${new File(project.unifiedpush.binariesDir, 'migrator/bin/').canonicalPath}", perm: "a+x", includes: "*")
                }

            }
            tools {
                migrator {
                    command {
                        return new CommandBuilder("${project.unifiedpush.binariesDir}/migrator/bin/ups-migrator")
                            .parameter("--logLevel=DEBUG")
                            .parameter("--changeLogFile=${home}/migrator/src/main/resources/liquibase/master.xml")
                    }
                }
            }        }

        upsFromMavenRepository {
            product 'aerogear'
            version '1.0.3'
            isInstalled { false }
            postActions {
                final authServerCanonicalCoordinate = "org.jboss.aerogear.unifiedpush:unifiedpush-auth-server:war:${version}"
                final agpushCanonicalCoordinate = "org.jboss.aerogear.unifiedpush:unifiedpush-server-${project.unifiedpush.type}:war:${version}"
                final agpushMigratorCoordinate = "org.jboss.aerogear.unifiedpush:unifiedpush-migrator:zip:dist:${version}"
                final agpushMigratorJarCoordinate = "org.jboss.aerogear.unifiedpush:unifiedpush-migrator:${version}"

                ConfigurableMavenResolverSystem resolver = Maven.configureResolver()
                        .withRemoteRepo(MavenRemoteRepositories
                        .createRemoteRepository('remote_ups', project.unifiedPushMavenRepository, 'default'))
                        .withMavenCentralRepo(false)


                // copy files to directory where files to be deployed are stored

                Files.copy(
                        resolver.resolve(authServerCanonicalCoordinate).withoutTransitivity().asSingleFile(),
                        new File(project.unifiedpush.binariesDir, 'auth-server.war'))
                Files.copy(
                        resolver.resolve(agpushCanonicalCoordinate).withoutTransitivity().asSingleFile(),
                        new File(project.unifiedpush.binariesDir, 'ag-push.war'))

                // prepare migrator, we need to download both binary dist and changeset in jar
                Spacelift.task(resolver.resolve(agpushMigratorCoordinate).withoutTransitivity().asSingleFile(), UnzipTool.class)
                    .toDir(new File(project.unifiedpush.binariesDir, 'migrator')).cutdirs().execute().await()
                project.ant.chmod(dir: "${ new File(project.unifiedpush.binariesDir, 'migrator/bin/').canonicalPath}", perm: "a+x", includes: "*")

                Spacelift.task(resolver.resolve(agpushMigratorJarCoordinate).withoutTransitivity().asSingleFile(), UnzipTool.class)
                    .toDir(new File(project.unifiedpush.binariesDir, 'migrator')).execute().await()

            }
            tools {
                migrator {
                    command {
                        return new CommandBuilder("${project.unifiedpush.binariesDir}/migrator/bin/ups-migrator")
                            .parameter("--logLevel=DEBUG")
                            .parameter("--changeLogFile=${project.unifiedpush.binariesDir}/migrator/liquibase/master.xml")
                    }
                }
            }
        }

        /**
         * Purpose of this is to enable running against previously downloaded wars.
         */
        upsProvided {
            product 'aerogear'
            version '1.0.3'
            preconditions {
                if(!project.unifiedPushServerWar) {
                    throw new IllegalStateException("You must specify path to ag-push.war via unifiedPushServerWar property")
                }
                if(!project.unifiedPushAuthServerWar) {
                    throw new IllegalStateException("You must specify path to auth-server.war via unifiedAuthServerWar property")
                }
                if(project.unifiedpush.runMigrator && !project.unifiedPushMigratorDist) {
                    throw new IllegalStateException("You must specify path to migrator-dist.zip via unifiedPushMigratorDist property")
                }
                return true
            }
            isInstalled { false }
            postActions {

                // this will resolve migrate
                final agpushMigratorJarCoordinate = "org.jboss.aerogear.unifiedpush:unifiedpush-migrator:${project.unifiedPushModelVersion}"

                ConfigurableMavenResolverSystem resolver = Maven.configureResolver()
                        .withRemoteRepo(MavenRemoteRepositories
                        .createRemoteRepository('remote_ups', project.unifiedPushModelRepository, 'default'))
                        .withMavenCentralRepo(false)

                // copy files to directory where files to be deployed are stored
                Files.copy(
                        new File(project.unifiedPushServerWar),
                        new File(project.unifiedpush.binariesDir, "ag-push.war"))
                Files.copy(
                        new File(project.unifiedPushAuthServerWar),
                        new File(project.unifiedpush.binariesDir, 'auth-server.war'))

                // prepare migrator, we need to download both binary dist and changeset in jar
                if(project.unifiedpush.runMigrator) {
                    Spacelift.task(new File(project.unifiedPushMigratorDist), UnzipTool.class)
                        .toDir(new File(project.unifiedpush.binariesDir, 'migrator')).cutdirs().execute().await()
                    project.ant.chmod(dir: "${ new File(project.unifiedpush.binariesDir, 'migrator/bin/').canonicalPath}", perm: "a+x", includes: "*")

                    Spacelift.task(resolver.resolve(agpushMigratorJarCoordinate).withoutTransitivity().asSingleFile(), UnzipTool.class)
                        .toDir(new File(project.unifiedpush.binariesDir, 'migrator')).execute().await()
                }
            }
            tools {
                migrator {
                    command {
                        return new CommandBuilder("${project.unifiedpush.binariesDir}/migrator/bin/ups-migrator")
                            .parameter("--logLevel=DEBUG")
                            .parameter("--changeLogFile=${project.unifiedpush.binariesDir}/migrator/liquibase/master.xml")
                    }
                }
            }            
        }

        /* installations related to Cordova Quickstarts testing */
        androidSdk(from:AndroidSdkInstallation) {
            product 'androidSdk'
            version '23'
            updateImages { false }
            createAvds { false } 
            androidTargets ([[name:'android-19']])
        }

        shootAndShareAndroidSdk(inherits:androidSdk) {
            buildTools { [ "19.0.0" ] } // this version is specifically needed when building Shoot&Share quickstart
        }

        helloWorldCordovaQuickstart {
            product 'aerogear'
            version '1.0.1'
            home "aerogear-push-helloworld-${version}"
            remoteUrl "https://github.com/jboss-mobile/unified-push-helloworld/archive/${version}.zip"
            isInstalled { false }
            extractMapper {
                toDir(home).cutdirs()
            }
            postActions {

                // I almost always forget these ...
                if (!project.googleProjectNumber || project.googleProjectNumber.length() == 0) {
                    throw new IllegalStateException("Be sure you have specified googleProjectNumber!")
                }

                if (!project.googleKey || project.googleKey.length() == 0) {
                    throw new IllegalStateException("Be sure you have specified googlekey!")
                }

                def authUrl = "https://${project.openShiftAppNameQuickstarts}-${project.openShiftNamespace}.rhcloud.com/auth"
                def pushUrl = "https://${project.openShiftAppNameQuickstarts}-${project.openShiftNamespace}.rhcloud.com/ag-push"
                def cordovaDir = "${home}/cordova"
                def pushConfigFile = new File("${cordovaDir}/www/push-config.json")

                Session session = LoginRequest.request()
                        .username("admin")
                        .password("123")
                        .setAuthServerUrl(new URL(authUrl))
                        .setUnifiedPushServerUrl(new URL(pushUrl))
                        .login()

                PushApplication pushApplication = PushApplicationWorker.worker()
                        .createContext(session, null)
                        .generate()
                        .persist()
                        .detachEntity()

                project.quickstartPushApplicationId = pushApplication.getPushApplicationID()
                project.quickstartPushApplicationMasterSecret = pushApplication.getMasterSecret()

                AndroidVariant variant = AndroidVariantWorker.worker()
                        .createContext(session, pushApplication)
                        .generate()
                        .projectNumber(project.googleProjectNumber)
                        .googleKey(project.googleKey)
                        .persist()
                        .detachEntity()

                def jsonConfig = JsonOutput.toJson(
                        [
                                pushServerURL: pushUrl,
                                android:
                                        [
                                                senderID: project.googleProjectNumber,
                                                variantID: variant.getVariantID(),
                                                variantSecret: variant.getSecret()
                                        ]
                        ]
                )

                pushConfigFile.text = jsonConfig

                Spacelift.task(CordovaExecutor).setDir(cordovaDir).setParameters('platform add android').execute().await()
                Spacelift.task(CordovaExecutor).setDir(cordovaDir).setParameters("plugin add org.jboss.aerogear.cordova.push").execute().await()
                Spacelift.task(CordovaExecutor).setDir(cordovaDir).setParameters('build android').execute().await()
            }
        }

        shootAndShareCordovaQuickstart {
            product 'aerogear'
            version '1.0.0'
            home "aerogear-shootandshare-${version}"
            remoteUrl "https://github.com/aerogear/aerogear-cordova-cookbook/archive/master.zip"
            isInstalled { false }
            extractMapper { toDir(home).cutdirs() }
            postActions {                
                // I almost always forget these ...
                if (!project.shootAndShareGoogleClientId || project.shootAndShareGoogleClientId.length() == 0) {
                    throw new IllegalStateException("Be sure you have specified shootAndShareGoogleClientId!")
                }

                if (!project.shootAndShareFacebookClientId || project.shootAndShareFacebookClientId.length() == 0) {
                    throw new IllegalStateException("Be sure you have specified shootAndShareFacebookClientId!")
                }

                if (!project.shootAndShareFacebookClientSecret || project.shootAndShareFacebookClientSecret.length() == 0) {
                    throw new IllegalStateException("Be sure you have specified shootAndShareFacebookClientSecret!")
                }

                def cordovaDir = "${home}/Shoot"

                new ShootAndShareQuickstartHelper().patchAppJs("${cordovaDir}/www/js/app.js",
                    project.shootAndShareGoogleClientId,
                    project.shootAndShareFacebookClientId,
                    project.shootAndShareFacebookClientSecret,
                    "http://localhost:8080/auth")

                // mock camera
                Files.copy(
                    new File("${project.rootDir.absolutePath}/quickstartTests/aerogear-shootandshare-cordova/patches/controllers.js"),
                    new File(cordovaDir, "www/js/controllers.js"))

                new ShootAndShareQuickstartHelper().patchControllerJs("${cordovaDir}/www/js/controllers.js", "http://localhost:8080/shoot/rest/photos")

                Spacelift.task(CordovaExecutor).setDir(cordovaDir).setParameters('platform add android@3.6.4').execute().await()
                Spacelift.task(CordovaExecutor).setDir(cordovaDir).setParameters('plugin add org.apache.cordova.camera').execute().await()
                Spacelift.task(CordovaExecutor).setDir(cordovaDir).setParameters('plugin add org.apache.cordova.file').execute().await()
                Spacelift.task(CordovaExecutor).setDir(cordovaDir).setParameters('plugin add org.apache.cordova.file-transfer').execute().await()
                Spacelift.task(CordovaExecutor).setDir(cordovaDir).setParameters('plugin add org.jboss.aerogear.cordova.oauth2').execute().await()

                new ShootAndShareQuickstartHelper().patchBuildGradle("${cordovaDir}/platforms/android/build.gradle")

                Spacelift.task('gradle112').workingDirectory("${cordovaDir}/platforms/android").parameter("clean").parameter("build").execute().await()
            }
        }

        // we need to build desktop video recorder from sources as this component cannot be deployed to Maven Central
        // due to license constraints
        arquillianDesktopVideoRecorder {
            product 'arquillian-desktop-video-recorder'
            version '1.0.0.Beta1'
            remoteUrl 'https://github.com/arquillian/arquillian-recorder/archive/1.0.0.Beta1.zip'
            home 'arquillian-recorder'
            fileName 'arquillian-recorder.zip'
            isInstalled {
                return new File(project.spacelift.workspace, ".repository/org/arquillian/extension/arquillian-desktop-video-recorder/${version}").exists()
            }
            extractMapper { toDir(home).cutdirs() }
            postActions {
                Spacelift.task(MavenExecutor)
                        .pom("${arquillianDesktopVideoRecorder.home.absolutePath}/pom.xml")
                        .goals('clean', 'install')
                        .execute().await()
            }
        }
    }

    /* TESTS */

    tests {
        openshiftIntegrationTests {
            execute {
                def baseUri = "https://${project.openShiftAppName}-${project.openShiftNamespace}.rhcloud.com:443";

                Spacelift.task(MavenExecutor).pom("pom.xml")
                        .property("http.ignore=true")
                        .property("containerUri=$baseUri")
                        .property("keystore.ignore=true")
                        .property('excludedGroups=category.AdminUI,category.Performance,category.ChromePackagedApp,category.SimplePush')
                        .goals('clean', 'test').execute().await()
            }
        }
        openshiftAdminUITests {
            execute {
                def baseUri = "https://${project.openShiftAppNameAdminUI}-${project.openShiftNamespace}.rhcloud.com:443";

                def maven = Spacelift.task(MavenExecutor).pom("pom.xml")
                        .profiles("recorder")
                        .property("containerUri=${baseUri}")
                        .property("javax.net.ssl.trustStore=${keystore.truststore.canonicalPath}")
                        .property("javax.net.ssl.trustStorePassword=${keystore.truststorePass}")
                        .ignoreTestFailures()
                        .goals('clean', 'test')

                for(prop in project.externalMavenParameters.split()){
                        maven.property(prop)
                }

                maven.execute().await()
            }
        }
        localIntegrationTests {

            def jbossManager = null

            dataProvider {
                project.protocols as ArrayList
            }
            beforeSuite {
                final def baseUri = "http://${project.container.localDomain}:8080/unifiedpush-test-extension-server"
                final def jbossManagerConfiguration = project.container.configuration
                final def jbossHome = project.container.home
                jbossManagerConfiguration.setJBossHome(jbossHome.canonicalPath)


                def javaOpts = [
                        "-Dhttp.proxyHost=${project.container.bindAddress}",
                        "-Dhttp.proxyPort=16000",
                        "-Dhttps.proxyHost=${project.container.bindAddress}",
                        "-Dhttps.proxyPort=16000",
                        "-Djboss.bind.address=${project.container.bindAddress}",
                        "-Djavax.net.ssl.trustStore=${keystore.truststore.canonicalPath}",
                        "-Djavax.net.ssl.trustStorePassword=${keystore.truststorePass}",
                        "-Dcustom.aerogear.apns.push.host=${project.container.bindAddress}",
                        "-Dcustom.aerogear.apns.push.port=16002",
                        "-Dcustom.aerogear.apns.feedback.host=${project.container.bindAddress}",
                        "-Dcustom.aerogear.apns.feedback.port=16003",
                        "-Dcustom.aerogear.apns.keystore.path=${project.unifiedpush.apnsCert.canonicalPath}",
                        "-Dcustom.aerogear.apns.keystore.password=${keystore.keystorePass}",
                        "-Dcustom.aerogear.apns.keystore.type=JKS",
                        "-Dgcm.mock.certificate.path=${project.unifiedpush.gcmCert.canonicalPath}",
                        "-Dgcm.mock.certificate.password=${project.unifiedpush.gcmKey.canonicalPath}",
                        "-Dgcm.mock.server.port=16010" ]

                if(project.ipVersion == "IPv6"){
                    javaOpts << "-Djava.net.preferIPv4Stack=false"
                    javaOpts << "-Djava.net.preferIPv6Addresses=true"
                }

                // append javaOpts
                jbossManagerConfiguration.setJavaOpts(jbossManagerConfiguration.getJavaOpts() as String[])
                jbossManagerConfiguration.setJavaOpts(javaOpts as String[])

                jbossManager = Spacelift.task(JBossStarter)
                        .configuration(jbossManagerConfiguration)
                        .execute().await()

                // undeploy content
                ['auth-server.war', "ag-push.war", 'unifiedpush-test-extension-server.war'].each { war ->
                    // We need the try-catch because there doesn't seem to be a way to ignore the 1 output from jboss-cli
                    try {
                        println "Undeploying ${war}"
                        Spacelift.task(JBossCLI)
                                .environment("JBOSS_HOME", jbossHome.canonicalPath)
                                .connect()
                                .cliCommand("undeploy ${war}")
                                .execute().await()

                        println "${war} undeployed successfully"
                    } catch (Exception e) {
                        println "${war} undeploy failed"
                    }
                }

                // run migrator
                if(project.unifiedpush.runMigrator) {
                    try {
                        Spacelift.task('migrator')
                                .parameter("--url=${project.unifiedpush.db.jdbc_url}")
                                .parameter("--username=${project.unifiedpush.db.username}")
                                .parameter("--password=${project.unifiedpush.db.password}")
                                .parameter("--driver=${project.unifiedpush.db.driver}")
                                .parameter("update")
                                .execute().await()
                    }
                    catch(InvalidTaskException e) {
                        throw new RuntimeException("Migrator tool was not registered but set to run via project.unifiedPush.runMigrator flag." +
                            "Make sure that UPS installation provides migrator tool.", e)
                    }
                }


                ['auth-server.war', "ag-push.war", 'unifiedpush-test-extension-server.war'].each { war ->
                    println "Deploying ${war}"

                    Spacelift.task(JBossCLI)
                            .environment("JBOSS_HOME", jbossHome.canonicalPath)
                            .connect()
                            .cliCommand("deploy ${new File(project.unifiedpush.binariesDir, war).canonicalPath}")
                            .execute().await()
                }

                println 'Waiting for unifiedpush-test-extension-server to be deployed. (max 5 minutes)'
                println "Expected deployment url: $baseUri"
                Awaitility.await().atMost(5, TimeUnit.MINUTES).pollInterval(5, TimeUnit.SECONDS).until(new Callable<Boolean>() {
                    @Override
                    Boolean call() throws Exception {
                        Response response = RestAssured.given()
                                .baseUri(baseUri)
                                .get('/status')

                        return response.statusCode == 200
                    }
                })
                println 'The unifiedpush-test-extension-server.war was successfully deployed.'

                println 'Waiting for Keycloak to be initialized and ready'
                Awaitility.await().atMost(5, TimeUnit.MINUTES).pollInterval(10, TimeUnit.SECONDS).until(new Callable<Boolean>() {
                    @Override
                    Boolean call() throws Exception {
                        Response response = RestAssured.given()
                                .baseUri(baseUri)
                                .get('/keycloak/realms')

                        response.then().log().all(true)

                        List<String> result = (List<String>) response.as(List.class)

                        return result.contains("aerogear")
                    }
                })

                println 'Reconfiguring KeyCloak.'
                RestAssured.given()
                        .baseUri(baseUri)
                        .get('/keycloak')
                        .then()
                        .log().all(true)
                        .statusCode(200)

                println 'Restarting container.'
                Spacelift.task(jbossManager, JBossStopper).execute().await()

                jbossManager = Spacelift.task(JBossStarter)
                        .configuration(jbossManagerConfiguration)
                        .execute().await()

                println 'Waiting for unifiedpush-test-extension-server to be deployed. (max 5 minutes)'
                println "Expected deployment url: $baseUri"
                Awaitility.await().atMost(5, TimeUnit.MINUTES).pollInterval(5, TimeUnit.SECONDS).until(new Callable<Boolean>() {
                    @Override
                    Boolean call() throws Exception {
                        Response response = RestAssured.given()
                                .baseUri(baseUri)
                                .get('/status')

                        return response.statusCode == 200
                    }
                })
                println 'The unifiedpush-test-extension-server.war was successfully deployed.'

                println 'Activating GCM and APNS proxy'

                RestAssured.given()
                        .baseUri(baseUri)
                        .get('/proxy/activate')
                        .then().statusCode(200)
                println 'Proxy activated'
            }
            execute { protocol ->
                def port = protocol == 'https' ? 8443 : 8080
                def baseUri = "${protocol}://${project.container.localDomain}:$port"

                println "Using external maven parameters: ${project.externalMavenParameters}"
                println "Using base uri: $baseUri"

                def maven = Spacelift.task(MavenExecutor).pom("pom.xml")
                        .property("containerUri=${baseUri}")
                        // we need to propage keystore/truststore setup so test can confirm
                        // authenticity of locally runing server
                        .property("keystore=${keystore.keystore.canonicalPath}")
                        .property("keystorePass=${keystore.keystorePass}")
                        .property("truststore=${keystore.truststore.canonicalPath}")
                        .property("truststorePass=${keystore.truststorePass}")
                        .property("containerUri=$baseUri")
                        .ignoreTestFailures()
                        .goals('clean', 'test')

                for(prop in project.externalMavenParameters.split()){
                        maven.property(prop)
                }

                maven.execute().await()
            }
            afterSuite {
                Spacelift.task(jbossManager, JBossStopper).execute().await()
            }
        }

        /* Quickstarts related tests */

        helloWorldCordovaQuickstart {

            beforeSuite {

                Spacelift.task([
                    'target' : "Google Inc.:Google APIs (x86 System Image):19",
                    'abi' : "default/x86",
                    'emulatorOptions' : "-no-skin -no-audio -no-window -nocache -no-snapshot-save -no-snapstorage"
                ], ArquillianXmlUpdater).dir(new File(project.rootDir, "quickstartTests/aerogear-push-helloworld-cordova/")).container('android').execute().await()

                Spacelift.task([
                    'androidHome' : "${androidSdk.home}",
                    'androidSdkHome' : "${project.spacelift.workspace.absolutePath}",
                    'androidSdkRoot' : "${androidSdk.home}",
                    'androidTools' : "${androidSdk.home}/tools",
                    'androidPlatformTools' : "${androidSdk.home}/platform-tools"
                ], ArquillianXmlUpdater).dir(new File(project.rootDir, "quickstartTests/aerogear-push-helloworld-cordova/")).extension('droidium-platform').execute().await()

            }

            execute {

                Spacelift.task(MavenExecutor)
                    .pom("${project.rootDir.absolutePath}/quickstartTests/aerogear-push-helloworld-cordova/pom.xml")
                    .property("selendroid.test.app=${helloWorldCordovaQuickstart.home}/cordova/platforms/android/ant-build/MainActivity-debug.apk")
                    .property("arquillian.debug=true")
                    .property("pushApplicationId=${project.quickstartPushApplicationId}")
                    .property("pushApplicationSecret=${project.quickstartPushApplicationMasterSecret}")
                    .property("pushUrl=https://${project.openShiftAppNameQuickstarts}-${project.openShiftNamespace}.rhcloud.com/ag-push")
                    .goal('clean')
                    .goal('test')
                    .execute().await()

            }
        }

        shootAndShareCordovaQuickstart {
            beforeSuite {

                Spacelift.task([
                    'target' : "Google Inc.:Google APIs (x86 System Image):19",
                    'abi' : "default/x86",
                    'emulatorOptions' : "-no-skin -no-audio -no-window -nocache -no-snapshot-save -no-snapstorage"
                ], ArquillianXmlUpdater).dir(new File(project.rootDir, "quickstartTests/aerogear-shootandshare-cordova/")).container('android').execute().await()

                Spacelift.task([
                    'androidHome' : "${androidSdk.home}",
                    'androidSdkHome' : "${project.spacelift.workspace.absolutePath}",
                    'androidSdkRoot' : "${androidSdk.home}",
                    'androidTools' : "${androidSdk.home}/tools",
                    'androidPlatformTools' : "${androidSdk.home}/platform-tools"
                ], ArquillianXmlUpdater).dir(new File(project.rootDir, "quickstartTests/aerogear-shootandshare-cordova/")).extension('droidium-platform').execute().await()
            }

            execute {

                Spacelift.task(MavenExecutor)
                    .pom("${project.rootDir.absolutePath}/quickstartTests/aerogear-shootandshare-cordova/pom.xml")
                    .property("selendroid.test.app=${shootAndShareCordovaQuickstart.home}/Shoot/platforms/android/build/apk/android-debug-unaligned.apk")
                    .property("arquillian.debug=true")
                    .property("facebookEmail=${project.facebookEmail}")
                    .property("facebookPassword=${project.facebookPassword}")
                    .goal('clean')
                    .goal('test')
                    .execute().await()

            }
        }
    }
}

// build dependencies
buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        // you need this only if you plan to use SNAPSHOT version of this plugin
        maven {
            name 'jboss-staging-repository-group'
            url 'https://repository.jboss.org/nexus/content/groups/staging'
        }
    }
    dependencies {
        classpath 'org.jboss.aerogear.test:aerogear-ups-rest-api:1.0.2'
        classpath 'org.jboss.aerogear.test:spacelift-jboss-manager:0.9.0'
        classpath 'org.arquillian.spacelift.gradle:arquillian-spacelift-gradle:1.0.0-alpha-12'
        classpath 'com.jayway.restassured:rest-assured:2.4.0'
        classpath 'com.jayway.awaitility:awaitility-groovy:1.6.3'
        classpath 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'
    }
}

// these elements are needed only if you are willing to use _testreport_ task
repositories {
    mavenLocal()
    mavenCentral()
}

configurations {
    junitreport
}

dependencies {
    junitreport 'org.apache.ant:ant-junit:1.9.4'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}
