import com.google.common.io.Files
import com.jayway.awaitility.Awaitility
import com.jayway.restassured.RestAssured
import com.jayway.restassured.response.Response

import org.arquillian.spacelift.Spacelift;
import org.arquillian.spacelift.gradle.*
import org.arquillian.spacelift.gradle.android.*
import org.arquillian.spacelift.gradle.arquillian.*
import org.arquillian.spacelift.gradle.container.*
import org.arquillian.spacelift.gradle.git.*
import org.arquillian.spacelift.gradle.gradle.*
import org.arquillian.spacelift.gradle.maven.*
import org.arquillian.spacelift.gradle.openshift.*
import org.arquillian.spacelift.gradle.quickstart.*
import org.arquillian.spacelift.gradle.utils.*
import org.arquillian.spacelift.gradle.cordova.CordovaExecutor
import org.arquillian.spacelift.process.CommandBuilder
import org.arquillian.spacelift.process.ProcessInteractionBuilder
import org.arquillian.spacelift.process.ProcessResult
import org.arquillian.spacelift.task.os.CommandTool
import org.arquillian.spacelift.task.net.DownloadTool
import org.arquillian.spacelift.task.io.WriteToFileTool
import org.jboss.aerogear.unifiedpush.api.*
import org.jboss.aerogear.test.container.manager.JBossManagerConfiguration
import org.jboss.aerogear.test.container.manager.configuration.ContainerType
import org.jboss.aerogear.test.container.spacelift.*
import org.jboss.aerogear.test.Session
import org.jboss.aerogear.test.api.auth.*
import org.jboss.aerogear.test.api.application.*
import org.jboss.aerogear.test.api.variant.android.*
import org.jboss.shrinkwrap.resolver.api.maven.ConfigurableMavenResolverSystem
import org.jboss.shrinkwrap.resolver.api.maven.Maven
import org.jboss.shrinkwrap.resolver.api.maven.repository.MavenRemoteRepositories
import org.junit.After;

import groovy.json.JsonOutput

import java.nio.file.attribute.PosixFilePermission
import java.nio.file.FileSystems
import java.util.Collections
import java.util.EnumSet
import java.util.concurrent.Callable
import java.util.concurrent.TimeUnit

apply plugin: 'spacelift'

ext {
    defaultOpenShiftAppName = 'upsintegrationtests'
    defaultOpenShiftAppNameAdminUI = 'upsadminui'
    defaultOpenShiftAppNameQuickstarts = 'quickstarts'
    defaultOpenShiftNamespace = 'mobileqa'
    defaultOpenShiftGearSize = 'small'
    defaultOpenShiftUsername = ''
    defaultOpenShiftPassword = ''
    defaultOpenShiftAppDirectory = 'unified-push'
    defaultOpenShiftCartridge = 'https://raw.githubusercontent.com/jboss-mobile/jboss-unified-push-openshift-cartridge/master/metadata/manifest.yml'

    defaultUnifiedPushTestExtensionVersion = '1.0.3-SNAPSHOT'
    defaultLittleProxyVersion = '1.1.0-beta1-SNAPSHOT'
    defaultSelendroidVersion = '0.15.0'
    defaultIpVersion = 'IPv4'

    androidSdkVersion = '23'

    androidTargets = [
        [ name: 'android-19' ]
    ]

    defaultUnifiedPushSource = 'repository'
    defaultUnifiedPushMavenRepository = 'http://dl.bintray.com/aerogear/AeroGear-UnifiedPush/'

    defaultEap6Version = '6.3.0'
    defaultEap6FileName = "jboss-eap-${defaultEap6Version}.zip"
    defaultEap6RemoteUrl = ''

    defaultProtocols = [ 'http' ]
    defaultBrowser = 'firefox'

    defaultUnifiedPushType = 'as7'
    defaultUnifiedPushServerWar = null
    defaultUnifiedPushAuthServerWar = null
    defaultUnifiedPushServerDatasource = null

    defaultJbossDomainMode = false
    defaultJbossHome = null
    defaultJbossContainer = ContainerType.EAP
    defaultJbossBindAddress = '127.0.0.1'
    defaultLocalDomain = '127.0.0.1'

    // We need to exclude APNS and GCMforChrome until it is fixed in proxy.
    // If there is problem, you can exclude category.GCM as well
    defaultExternalMavenParameters = "excludedGroups=category.AdminUI,category.Performance,category.ChromePackagedApp"

    // Hello World quickstart related
    defaultGoogleProjectNumber = ''
    defaultGoogleKey = ''
    defaultQuickstartPushApplicationId = ''
    defaultQuickstartPushApplicationMasterSecret = ''

    // Shoot&Share quickstart related
    defaultShootAndShareGoogleClientId = ''
    defaultShootAndShareFacebookClientId = ''
    defaultShootAndShareFacebookClientSecret = ''
    defaultFacebookEmail = ''
    defaultFacebookPassword = ''

    defaultUnifiedPushBinariesDir = new File(project.rootDir, 'spacelift/upsBin')
}

spacelift {
    workspace = new File(project.rootDir, 'spacelift/workspace')
    installationsDir = new File(project.rootDir, 'spacelift/cache')

    tools {
        rhc {
            command 'rhc'
        }
    }

    profiles {
        openshift {
            enabledInstallations 'maven', 'littleProxy', 'unifiedPushServer_preReleaseMaven', 'aerogearTestingTools', 'unifiedPushServerOpenshift'
            tests 'openshiftIntegrationTests'
        }
        local {
            tests 'localIntegrationTests'
        }
        eap6(inherits: local) {
            enabledInstallations {
                ['maven', 'littleProxy', 'unifiedPushServer_preReleaseMaven', 'aerogearTestingTools', 'eap6Container', "unifiedPushServer_${project.unifiedPushSource}"]
            }
        }
        wildfly8(inherits: local) {
            enabledInstallations {
                ['maven', 'littleProxy', 'unifiedPushServer_preReleaseMaven', 'aerogearTestingTools', 'wildfly8Container', "unifiedPushServer_${project.unifiedPushSource}"]
            }
        }

        externalEap6(inherits: local) {
            enabledInstallations {
                ['maven', 'littleProxy', 'unifiedPushServer_preReleaseMaven', 'aerogearTestingTools', "unifiedPushServer_${project.unifiedPushSource}"]
            }
        }

        helloWorldCordovaqQuickstart {
            enabledInstallations 'maven', 'littleProxy', 'aerogearTestingTools', 'androidSdk', 'selendroid', 'unifiedPushServer_preReleaseMaven', 'unifiedPushServerQuickstarts', 'helloWorldCordovaQuickstart'
            tests 'helloWorldCordovaQuickstart'
        }

        shootAndShareCordovaQuickstart {
            enabledInstallations 'maven', 'shootAndShareAndroidSdk', 'selendroid', 'gradle112', 'shootAndShareCordovaQuickstart'
            tests 'shootAndShareCordovaQuickstart'
        }

        adminUIOpenshift  {
            enabledInstallations 'maven', 'littleProxy', 'unifiedPushServer_preReleaseMaven', 'aerogearTestingTools', 'unifiedPushServerAdminUI', 'arquillianDesktopVideoRecorder'
            tests 'openshiftAdminUITests'
        }
    }

    installations {
        maven {
            product 'maven'
            version { '3.2.5' }
            remoteUrl "http://www.eu.apache.org/dist/maven/maven-3/${version}/binaries/apache-maven-${version}-bin.zip"
            home 'maven'
            fileName "maven.zip"
            extractMapper { toDir(home).cutdirs() }
            tools {
                mvn {
                    command {
                        def quietParameters = System.getenv("TRAVIS") != null ? ["-B", "-q"] : []
                        def mavenPath = "${maven.home}/bin/mvn" + (EnvironmentUtils.runsOnWindows() ? ".bat" : "")
                        return new CommandBuilder(mavenPath).parameters(quietParameters)
                    }
                }
            }
            postActions {
                if (!FileSystems.getDefault().supportedFileAttributeViews().contains("posix")) {
                    return
                }

                def executable = new File("${maven.home.absolutePath}/bin/mvn").toPath();
                Set<PosixFilePermission> perms = Collections.synchronizedSet(EnumSet.allOf(PosixFilePermission.class));

                java.nio.file.Files.setPosixFilePermissions(executable, perms)
            }
        }
        
        gradle112(from:GradleInstallation) {
            version { "1.12" }
            alias { "gradle112" }
            environment {
                [
                    "ANDROID_HOME" : androidSdk.home.canonicalPath,
                    "ANDROID_SDK_HOME" : androidSdk.home.parentFile.canonicalPath
                ]
            }
        }

        littleProxy {
            product 'aerogear'
            version { project.littleProxyVersion }
            remoteUrl 'https://github.com/adamfisk/LittleProxy/archive/696e3a87a64e9ede019e68312e0c8f9674d1b2a8.zip'
            home 'littleproxy'
            isInstalled {
                return new File(project.spacelift.workspace, ".repository/org/littleshoot/littleproxy/${version}").exists()
            }
            fileName 'littleproxy.zip'
            extractMapper { toDir(home).cutdirs() }
            postActions {
                Spacelift.task(MavenExecutor)
                        .pom("${littleProxy.home.absolutePath}/pom.xml")
                        .goals('clean', 'install')
                        .execute().await()
            }
        }

        unifiedPushServer_preReleaseMaven {
            product 'aerogear'
            version '1.0.3'
            remoteUrl 'https://github.com/aerogear/aerogear-unifiedpush-server/archive/1.0.x.zip'
            home 'aerogear-unifiedpush-server-pre-release'
            fileName 'aerogear-unifiedpush-server-pre-release.zip'
            extractMapper { toDir(home).cutdirs() }
            postActions {
                Spacelift.task(MavenExecutor).pom('pom.xml')
                        .workingDir(home.absolutePath)
                        .withoutSubprojects()
                        .goals('clean', 'install')
                        .properties( 'skipTests', 'maven.javadoc.skip=true')
                        .execute().await()

                Spacelift.task(MavenExecutor).pom('model/pom.xml')
                        .workingDir(home.absolutePath)
                        .goals('clean', 'install')
                        .properties( 'skipTests', 'maven.javadoc.skip=true')
                        .execute().await()
            }
        }

        aerogearTestingTools {
            product 'aerogear'
            version { project.unifiedPushTestExtensionVersion }
            remoteUrl 'https://github.com/aerogear/aerogear-testing-tools/archive/6f762e4a42e3f95cd450e3477d89b1e598d7b97f.zip'
            home 'aerogear-testing-tools'
            isInstalled {
                return new File(project.spacelift.workspace, ".repository/org/jboss/aerogear/test/unifiedpush-test-extension/${version}").exists()
            }
            fileName 'aerogear-testing-tools.zip'
            extractMapper { toDir(home).cutdirs() }
            postActions {
                Spacelift.task(MavenExecutor)
                    .pom("${home.absolutePath}/unifiedpush-test-extension/pom.xml")
                    .goals('clean', 'install')
                    .execute().await()

                /// We need to install it before it is released
                Spacelift.task(MavenExecutor)
                    .pom("${home.absolutePath}/aerogear-ups-rest-api/pom.xml")
                    .goals('clean', 'install')
                    .execute().await()
            }
        }

        selendroid {
            product 'selendroid'
            version { project.selendroidVersion }
            remoteUrl { "https://github.com/selendroid/selendroid/releases/download/${version}/selendroid-standalone-${version}-with-dependencies.jar" }
            fileName { "selendroid-standalone-${version}-with-dependencies.jar" }
            home { "selendroid-standalone-${version}-with-dependencies.jar" }
        }

        androidSdk(from:AndroidSdkInstallation) {
            product 'androidSdk'
            version { project.androidSdkVersion }
            updateImages { false }
            createAvds { false } 
            androidTargets { project.androidTargets }
        }

        shootAndShareAndroidSdk(inherits:androidSdk) {
            buildTools { [ "19.0.0" ] } // this version is specifically needed when building Shoot&Share quickstart
        }

        wildfly8Container {
            product { 'jboss' }
            version { '8.2.0' }
            fileName { 'wildfly-8.2.0.Final.zip' }
            remoteUrl { 'http://download.jboss.org/wildfly/8.2.0.Final/wildfly-8.2.0.Final.zip' }
            home { 'wildfly-8.2.0.Final' }
            extractMapper { toDir(home).cutdirs() }
            isInstalled {
                project.jbossHome = home
                project.jbossContainer = ContainerType.WILDFLY
                project.unifiedPushType = 'wildfly'

                // There seems to be an error on subsequent runs with the keycloak-default persistence unit
                // so we reinstall each time.
                return false
            }
            postActions {
                project.ant.chmod(dir: "${home}/bin", perm: "a+x", includes: "**/*.sh")
            }
        }

        eap6Container {
            product 'eap'
            version { project.eap6Version }
            fileName { project.eap6FileName }
            remoteUrl { project.eap6RemoteUrl }
            extractMapper { toDir(home).cutdirs() }
            isInstalled {
                project.jbossHome = home
                project.jbossContainer = ContainerType.EAP
                project.unifiedPushType = 'as7'

                return home.exists()
            }
            postActions {
                project.ant.chmod(dir: "${home}/bin", perm: "a+x", includes: "**/*.sh")
            }
        }

        unifiedPushServerOpenshiftWithoutProxy(from:UPSOpenShiftInstallation) {
            openShiftUsername { project.openShiftUsername }
            openShiftPassword { project.openShiftPassword }
            openShiftRepository { File.createTempDir() }
            unifiedPushTestExtensionVersion { project.unifiedPushTestExtensionVersion }
            isInstalled { false }
        }

        unifiedPushServerOpenshift(inherits:unifiedPushServerOpenshiftWithoutProxy) {
            turnProxyOn { true }
        }

        unifiedPushServerQuickstarts(inherits:unifiedPushServerOpenshiftWithoutProxy) {
            openShiftAppName { project.openShiftAppNameQuickstarts }
        }

        unifiedPushServerAdminUI(inherits:unifiedPushServerOpenshiftWithoutProxy) {
            openShiftAppName { project.openShiftAppNameAdminUI } 
        }

        unifiedPushServer_repository {
            product 'aerogear'
            version '1.0.3'
            remoteUrl 'https://github.com/aerogear/aerogear-unifiedpush-server/archive/1.0.x.zip'
            home 'aerogear-unifiedpush-server'
            fileName 'aerogear-unifiedpush-server.zip'
            extractMapper { toDir(home).cutdirs() }
            postActions {
                Spacelift.task(MavenExecutor).pom('pom.xml')
                        .workingDir(home.absolutePath)
                        .goals('clean', 'package')
                        .properties( 'skipTests', 'maven.javadoc.skip=true')
                        .execute().await()

                project.unifiedPushBinariesDir.mkdirs()

                Spacelift.task(DownloadTool.class)
                        .from('https://raw.githubusercontent.com/aerogear/aerogear-unifiedpush-server/master/databases/unifiedpush-h2-ds.xml')
                        .to(new File(project.unifiedPushBinariesDir, 'unifiedpush-h2-ds.xml'))
                        .execute().await()

                Files.copy(
                        new File(home, 'servers/auth-server/target/auth-server.war'),
                        new File(project.unifiedPushBinariesDir, 'auth-server.war'))

                Files.copy(
                        new File(home, 'servers/ups-as7/target/ag-push.war'),
                        new File(project.unifiedPushBinariesDir, 'as7-ag-push.war'))

                Files.copy(
                        new File(home, 'servers/ups-wildfly/target/ag-push.war'),
                        new File(project.unifiedPushBinariesDir, 'wildfly-ag-push.war'))


            }
        }

        unifiedPushServer_maven {
            product 'aerogear'
            version '1.0.2'
            postActions {
                final authServerCanonicalCoordinate = "org.jboss.aerogear.unifiedpush:unifiedpush-auth-server:war:${version}"
                final upsAs7CanonicalCoordinate = "org.jboss.aerogear.unifiedpush:unifiedpush-server-as7:war:${version}"
                final upsWildFlyCanonicalCoordinate = "org.jboss.aerogear.unifiedpush:unifiedpush-server-wildfly:war:${version}"

                ConfigurableMavenResolverSystem resolver = Maven.configureResolver()
                        .withRemoteRepo(MavenRemoteRepositories
                        .createRemoteRepository('remote_ups', project.unifiedPushMavenRepository, 'default'))
                        .withMavenCentralRepo(false)

                project.unifiedPushBinariesDir.mkdirs()

                Spacelift.task(DownloadTool.class)
                        .from('https://raw.githubusercontent.com/aerogear/aerogear-unifiedpush-server/master/databases/unifiedpush-h2-ds.xml')
                        .to(new File(project.unifiedPushBinariesDir, 'unifiedpush-h2-ds.xml'))
                        .execute().await()

                Files.copy(
                        resolver.resolve(authServerCanonicalCoordinate).withoutTransitivity().asSingleFile(),
                        new File(project.unifiedPushBinariesDir, 'auth-server.war'))

                Files.copy(
                        resolver.resolve(upsAs7CanonicalCoordinate).withoutTransitivity().asSingleFile(),
                        new File(project.unifiedPushBinariesDir, 'as7-ag-push.war'))

                Files.copy(
                        resolver.resolve(upsWildFlyCanonicalCoordinate).withoutTransitivity().asSingleFile(),
                        new File(project.unifiedPushBinariesDir, 'wildfly-ag-push.war'))
            }
        }

        /**
         * Purpose of this is to enable running against previously downloaded wars.
         */
        unifiedPushServer_none {
            product 'aerogear'
            version '1.0.2'
            isInstalled { false }
            postActions {
                project.unifiedPushBinariesDir.mkdirs()

                if (project.unifiedPushServerWar != null) {
                    Files.copy(
                            new File(project.unifiedPushServerWar),
                            new File(project.unifiedPushBinariesDir, "${project.unifiedPushType}-ag-push.war")
                    )
                }
                if (project.unifiedPushAuthServerWar != null) {
                    Files.copy(
                            new File(project.unifiedPushAuthServerWar),
                            new File(project.unifiedPushBinariesDir, 'auth-server.war')
                    )
                }
                if (project.unifiedPushServerDatasource != null) {
                    Files.copy(
                            new File(project.unifiedPushServerDatasource),
                            new File(project.unifiedPushBinariesDir, 'unifiedpush-h2-ds.xml')
                    )
                }
            }
        }

        deployUnifiedPushToContainer {
            product 'aerogear'
            version '1.0.2'
            postActions {
                project.unifiedPushType
            }
        }

        helloWorldCordovaquickstart {
            product 'aerogear'
            version '1.0.1'

            home "aerogear-push-helloworld-${version}"
            remoteUrl "https://github.com/jboss-mobile/unified-push-helloworld/archive/${version}.zip"

            isInstalled { false }

            extractMapper {
                toDir(home).cutdirs()
            }

            postActions {

                // I almost always forget these ...
                if (!project.googleProjectNumber || project.googleProjectNumber.length() == 0) {
                    throw new IllegalStateException("Be sure you have specified googleProjectNumber!")
                }

                if (!project.googleKey || project.googleKey.length() == 0) {
                    throw new IllegalStateException("Be sure you have specified googlekey!")
                }

                def authUrl = "https://${project.openShiftAppNameQuickstarts}-${project.openShiftNamespace}.rhcloud.com/auth"
                def pushUrl = "https://${project.openShiftAppNameQuickstarts}-${project.openShiftNamespace}.rhcloud.com/ag-push"
                def cordovaDir = "${home}/cordova"
                def pushConfigFile = new File("${cordovaDir}/www/push-config.json")

                Session session = LoginRequest.request()
                        .username("admin")
                        .password("123")
                        .setAuthServerUrl(new URL(authUrl))
                        .setUnifiedPushServerUrl(new URL(pushUrl))
                        .login()

                PushApplication pushApplication = PushApplicationWorker.worker()
                        .createContext(session, null)
                        .generate()
                        .persist()
                        .detachEntity()

                project.quickstartPushApplicationId = pushApplication.getPushApplicationID()
                project.quickstartPushApplicationMasterSecret = pushApplication.getMasterSecret()

                AndroidVariant variant = AndroidVariantWorker.worker()
                        .createContext(session, pushApplication)
                        .generate()
                        .projectNumber(project.googleProjectNumber)
                        .googleKey(project.googleKey)
                        .persist()
                        .detachEntity()

                def jsonConfig = JsonOutput.toJson(
                        [
                                pushServerURL: pushUrl,
                                android:
                                        [
                                                senderID: project.googleProjectNumber,
                                                variantID: variant.getVariantID(),
                                                variantSecret: variant.getSecret()
                                        ]
                        ]
                )

                pushConfigFile.text = jsonConfig

                Spacelift.task(CordovaExecutor).setDir(cordovaDir).setParameters('platform add android').execute().await()
                Spacelift.task(CordovaExecutor).setDir(cordovaDir).setParameters("plugin add org.jboss.aerogear.cordova.push").execute().await()
                Spacelift.task(CordovaExecutor).setDir(cordovaDir).setParameters('build android').execute().await()
            }
        }

        shootAndShareCordovaQuickstart {
            product 'aerogear'
            version '1.0.0'
            home "aerogear-shootandshare-${version}"
            remoteUrl "https://github.com/aerogear/aerogear-cordova-cookbook/archive/master.zip"
            isInstalled { false }
            extractMapper { toDir(home).cutdirs() }
            postActions {                
                // I almost always forget these ...
                if (!project.shootAndShareGoogleClientId || project.shootAndShareGoogleClientId.length() == 0) {
                    throw new IllegalStateException("Be sure you have specified shootAndShareGoogleClientId!")
                }

                if (!project.shootAndShareFacebookClientId || project.shootAndShareFacebookClientId.length() == 0) {
                    throw new IllegalStateException("Be sure you have specified shootAndShareFacebookClientId!")
                }

                if (!project.shootAndShareFacebookClientSecret || project.shootAndShareFacebookClientSecret.length() == 0) {
                    throw new IllegalStateException("Be sure you have specified shootAndShareFacebookClientSecret!")
                }

                def cordovaDir = "${home}/Shoot"

                new ShootAndShareQuickstartHelper().patchAppJs("${cordovaDir}/www/js/app.js",
                    project.shootAndShareGoogleClientId,
                    project.shootAndShareFacebookClientId,
                    project.shootAndShareFacebookClientSecret,
                    "http://localhost:8080/auth")

                // mock camera
                Files.copy(
                    new File("${project.rootDir.absolutePath}/quickstartTests/aerogear-shootandshare-cordova/patches/controllers.js"),
                    new File(cordovaDir, "www/js/controllers.js"))

                new ShootAndShareQuickstartHelper().patchControllerJs("${cordovaDir}/www/js/controllers.js", "http://localhost:8080/shoot/rest/photos")

                Spacelift.task(CordovaExecutor).setDir(cordovaDir).setParameters('platform add android@3.6.4').execute().await()
                Spacelift.task(CordovaExecutor).setDir(cordovaDir).setParameters('plugin add org.apache.cordova.camera').execute().await()
                Spacelift.task(CordovaExecutor).setDir(cordovaDir).setParameters('plugin add org.apache.cordova.file').execute().await()
                Spacelift.task(CordovaExecutor).setDir(cordovaDir).setParameters('plugin add org.apache.cordova.file-transfer').execute().await()
                Spacelift.task(CordovaExecutor).setDir(cordovaDir).setParameters('plugin add org.jboss.aerogear.cordova.oauth2').execute().await()

                new ShootAndShareQuickstartHelper().patchBuildGradle("${cordovaDir}/platforms/android/build.gradle")

                Spacelift.task('gradle112').workingDirectory("${cordovaDir}/platforms/android").parameter("clean").parameter("build").execute().await()
            }
        }

        arquillianDesktopVideoRecorder {
            product 'arquillian-desktop-video-recorder'
            version '1.0.0.Beta1'
            remoteUrl 'https://github.com/arquillian/arquillian-recorder/archive/1.0.0.Beta1.zip'
            home 'arquillian-recorder'
            fileName 'arquillian-recorder.zip'
            isInstalled {
                return new File(project.spacelift.workspace, ".repository/org/arquillian/extension/arquillian-desktop-video-recorder/${version}").exists()
            }
            extractMapper { toDir(home).cutdirs() }
            postActions {
                Spacelift.task(MavenExecutor)
                        .pom("${arquillianDesktopVideoRecorder.home.absolutePath}/pom.xml")
                        .goals('clean', 'install')
                        .execute().await()
            }
        }
    }

    tests {
        openshiftIntegrationTests {
            execute {
                def baseUri = "https://${project.openShiftAppName}-${project.openShiftNamespace}.rhcloud.com:443";

                Spacelift.task(MavenExecutor).pom("pom.xml")
                        .profile('openshift')
                        .property("http.ignore=true")
                        .property("containerUri=$baseUri")
                        .property("keystore.ignore=true")
                        .goals('clean', 'test').execute().await()
            }
        }
        openshiftAdminUITests {
            execute {
                def baseUri = "https://${project.openShiftAppNameAdminUI}-${project.openShiftNamespace}.rhcloud.com:443";

                def mavenTask = Spacelift.task(MavenExecutor).pom("pom.xml")
                        .profiles('openshift', 'recorder')
                        .property('groups=category.AdminUI')
                        .property('excludedGroups=')
                        .property("containerUri=$baseUri")
                        .property("browser=${project.browser}")
                        .goals('clean', 'dependency:tree', 'test')

                project.externalMavenParameters.split().each {
                    mavenTask.property(it)
                }

                mavenTask.execute().await()
            }
        }
        localIntegrationTests {
            dataProvider {
                project.protocols as ArrayList
            }
            beforeSuite {
                def jbossHome = project.jbossHome
                if (jbossHome instanceof CharSequence) {
                    jbossHome = new File(jbossHome)
                }
                final def baseUri = "http://${project.localDomain}:8080/unifiedpush-test-extension-server"
                final def jbossManagerConfiguration = new JBossManagerConfiguration()
                        .setContainerType(project.jbossContainer)
                        .setJBossHome(jbossHome.absolutePath)
                        .setStartupTimeoutInSeconds(300)

                def commonJavaOpts = " -Dhttp.proxyHost=${project.jbossBindAddress} -Dhttp.proxyPort=16000 "
                commonJavaOpts += "-Dhttps.proxyHost=${project.jbossBindAddress} -Dhttps.proxyPort=16000 "
                commonJavaOpts += "-Djboss.bind.address=${project.jbossBindAddress} "
                commonJavaOpts += "-Djavax.net.ssl.trustStore=setup/aerogear.truststore "
                commonJavaOpts += "-Djavax.net.ssl.trustStorePassword=aerogear "
                commonJavaOpts += "-Dcustom.aerogear.apns.push.host=${project.jbossBindAddress} "
                commonJavaOpts += "-Dcustom.aerogear.apns.push.port=16002 "
                commonJavaOpts += "-Dcustom.aerogear.apns.feedback.host=${project.jbossBindAddress} "
                commonJavaOpts += "-Dcustom.aerogear.apns.feedback.port=16003 "
                commonJavaOpts += "-DgcmMockCrt=${new File(aerogearTestingTools.home, 'unifiedpush-test-extension/sslcert/gcm_mock.crt').absolutePath} "
                commonJavaOpts += "-DgcmMockKey=${new File(aerogearTestingTools.home, 'unifiedpush-test-extension/sslcert/gcm_mock.key').absolutePath} "
                if(project.ipVersion == "IPv6"){
                    commonJavaOpts += "-Djava.net.preferIPv4Stack=false "
                    commonJavaOpts += "-Djava.net.preferIPv6Addresses=true "
                }

                def deploymentGroups = ""
                def undeploymentGroups = ""
                if (project.jbossDomainMode == true) {
                    def javaOpts = jbossManagerConfiguration.getProcessControllerJavaOpts() + " "
                    javaOpts += commonJavaOpts
                    jbossManagerConfiguration.domain().setProcessControllerJavaOpts(javaOpts)
                    deploymentGroups = " --all-server-groups"
                    undeploymentGroups = " --all-relevant-server-groups"
                } else {
                    def javaOpts = jbossManagerConfiguration.getJavaOpts()
                    javaOpts += commonJavaOpts
                    jbossManagerConfiguration.setJavaOpts(javaOpts)
                }

                project.ext.jbossManager = Spacelift.task(JBossStarter)
                        .configuration(jbossManagerConfiguration)
                        .execute().await()

                ['unifiedpush-h2-ds.xml', 'auth-server.war', "${project.unifiedPushType}-ag-push.war",
                 'unifiedpush-test-extension-server.war'].each {
                    // We need the try-catch because there doesn't seem to be a way to ignore the 1 output from jboss-cli
                    try {
                        println "Undeploying ${it}"
                        Spacelift.task(JBossCLI)
                                .environment("JBOSS_HOME", jbossHome.absolutePath)
                                .connect()
                                .cliCommand("undeploy ${it}${undeploymentGroups}")
                                .execute().await()

                        println "${it} undeployed successfully"
                    } catch (Exception e) {
                        println "${it} undeploy failed"
                    }
                }

                def datasourceXmlFile = new File(project.unifiedPushBinariesDir, 'unifiedpush-h2-ds.xml')
                if(datasourceXmlFile.exists()) {
                    Spacelift.task(JBossCLI)
                            .environment("JBOSS_HOME", jbossHome.absolutePath)
                            .connect()
                            .cliCommand("deploy ${datasourceXmlFile.absolutePath}${deploymentGroups}")
                            .execute().await()
                }

                Spacelift.task(JBossCLI)
                        .environment("JBOSS_HOME", jbossHome.absolutePath)
                        .connect()
                        .cliCommand("deploy ${new File(project.unifiedPushBinariesDir, 'auth-server.war').absolutePath}${deploymentGroups}")
                        .then(JBossCLI)
                        .environment("JBOSS_HOME", jbossHome.absolutePath)
                        .connect()
                        .cliCommand("deploy ${new File(project.unifiedPushBinariesDir, "${project.unifiedPushType}-ag-push.war").absolutePath}${deploymentGroups}")
                        .then(JBossCLI)
                        .environment("JBOSS_HOME", jbossHome.absolutePath)
                        .connect()
                        .cliCommand("deploy ${new File(aerogearTestingTools.home, 'unifiedpush-test-extension/unifiedpush-test-extension-server/target/unifiedpush-test-extension-server.war').absolutePath}${deploymentGroups}")
                        .execute().await()

                println 'Waiting for unifiedpush-test-extension-server to be deployed. (max 5 minutes)'
                println "Expected deployment url: $baseUri"
                Awaitility.await().atMost(5, TimeUnit.MINUTES).pollInterval(5, TimeUnit.SECONDS).until(new Callable<Boolean>() {
                    @Override
                    Boolean call() throws Exception {
                        Response response = RestAssured.given()
                                .baseUri(baseUri)
                                .get('/status')

                        return response.statusCode == 200
                    }
                })
                println 'The unifiedpush-test-extension-server.war was successfully deployed.'

                println 'Reconfiguring KeyCloak.'
                RestAssured.given()
                        .baseUri(baseUri)
                        .get('/keycloak')
                        .then()
                        .log().all(true)
                        .statusCode(200)

                println 'Restarting container.'
                Spacelift.task(project.jbossManager, JBossStopper).execute().await()

                project.ext.jbossManager = Spacelift.task(JBossStarter)
                        .configuration(jbossManagerConfiguration)
                        .execute().await()

                println 'Waiting for unifiedpush-test-extension-server to be deployed. (max 5 minutes)'
                println "Expected deployment url: $baseUri"
                Awaitility.await().atMost(5, TimeUnit.MINUTES).pollInterval(5, TimeUnit.SECONDS).until(new Callable<Boolean>() {
                    @Override
                    Boolean call() throws Exception {
                        Response response = RestAssured.given()
                                .baseUri(baseUri)
                                .get('/status')

                        return response.statusCode == 200
                    }
                })
                println 'The unifiedpush-test-extension-server.war was successfully deployed.'

                println 'Activating GCM and APNS proxy'

                RestAssured.given()
                        .baseUri(baseUri)
                        .get('/proxy/activate')
                        .then().statusCode(200)
                println 'Proxy activated'
            }
            execute { protocol ->
                def port = protocol == 'https' ? 8443 : 8080
                def baseUri = "$protocol://${project.localDomain}:$port"

                println "Using external maven parameters: ${project.externalMavenParameters}"
                println "Using base uri: $baseUri"

                /*Spacelift.task('mvn')
                        .parameters('-Popenshift', "-DcontainerUri=$baseUri", 'clean', 'test')
                        .interaction(new ProcessInteractionBuilder().when(".*").printToOut())
                        .parameters(new CommandBuilder('unused').splitToParameters(project.externalMavenParameters).build().getParameters())
                        .execute().await()
                */
                def test_task = Spacelift.task(MavenExecutor).pom("pom.xml")
                        .profile('openshift')
                        .property("containerUri=$baseUri")
                        .goals('clean', 'test')
                for(prop in project.externalMavenParameters.split()){
                        test_task.property(prop)
                }

                test_task.execute().await()
            }
            afterSuite {
                Spacelift.task(project.jbossManager, JBossStopper).execute().await()
            }
        }

        helloWorldCordovaQuickstart {

            beforeSuite {

                Spacelift.task([
                    'target' : "Google Inc.:Google APIs (x86 System Image):19",
                    'abi' : "default/x86",
                    'emulatorOptions' : "-no-skin -no-audio -no-window -nocache -no-snapshot-save -no-snapstorage"
                ], ArquillianXmlUpdater).dir(new File(project.rootDir, "quickstartTests/aerogear-push-helloworld-cordova/")).container('android').execute().await()

                Spacelift.task([
                    'androidHome' : "${androidSdk.home}",
                    'androidSdkHome' : "${project.spacelift.workspace.absolutePath}",
                    'androidSdkRoot' : "${androidSdk.home}",
                    'androidTools' : "${androidSdk.home}/tools",
                    'androidPlatformTools' : "${androidSdk.home}/platform-tools"
                ], ArquillianXmlUpdater).dir(new File(project.rootDir, "quickstartTests/aerogear-push-helloworld-cordova/")).extension('droidium-platform').execute().await()

                Spacelift.task([
                    'serverApk' : "${selendroid.home}/prebuild/selendroid-server-${selendroid.version}.apk",
                    'driverApk' : "${selendroid.home}/prebuild/android-driver-app-${selendroid.version}.apk",
                ], ArquillianXmlUpdater).dir(new File(project.rootDir, "quickstartTests/aerogear-push-helloworld-cordova/")).extension('droidium-native').execute().await()

            }

            execute {

                Spacelift.task(MavenExecutor)
                    .pom("${project.rootDir.absolutePath}/quickstartTests/aerogear-push-helloworld-cordova/pom.xml")
                    .property("selendroid.test.app=${helloworldCordovaQuickstart.home}/cordova/platforms/android/ant-build/CordovaApp-debug.apk")
                    .property("arquillian.debug=true")
                    .property("pushApplicationId=${project.quickstartPushApplicationId}")
                    .property("pushApplicationSecret=${project.quickstartPushApplicationMasterSecret}")
                    .property("pushUrl=https://${project.openShiftAppNameQuickstarts}-${project.openShiftNamespace}.rhcloud.com/ag-push")
                    .goal('clean')
                    .goal('test')
                    .execute().await()

            }
        }

        shootAndShareCordovaQuickstart {
            beforeSuite {

                Spacelift.task([
                    'target' : "Google Inc.:Google APIs (x86 System Image):19",
                    'abi' : "default/x86",
                    'emulatorOptions' : "-no-skin -no-audio -no-window -nocache -no-snapshot-save -no-snapstorage"
                ], ArquillianXmlUpdater).dir(new File(project.rootDir, "quickstartTests/aerogear-shootandshare-cordova/")).container('android').execute().await()

                Spacelift.task([
                    'androidHome' : "${androidSdk.home}",
                    'androidSdkHome' : "${project.spacelift.workspace.absolutePath}",
                    'androidSdkRoot' : "${androidSdk.home}",
                    'androidTools' : "${androidSdk.home}/tools",
                    'androidPlatformTools' : "${androidSdk.home}/platform-tools"
                ], ArquillianXmlUpdater).dir(new File(project.rootDir, "quickstartTests/aerogear-shootandshare-cordova/")).extension('droidium-platform').execute().await()

                Spacelift.task([
                    'serverApk' : "${selendroid.home}/prebuild/selendroid-server-${selendroid.version}.apk",
                    'driverApk' : "${selendroid.home}/prebuild/android-driver-app-${selendroid.version}.apk",
                ], ArquillianXmlUpdater).dir(new File(project.rootDir, "quickstartTests/aerogear-shootandshare-cordova/")).extension('droidium-native').execute().await()

            }

            execute {

                Spacelift.task(MavenExecutor)
                    .pom("${project.rootDir.absolutePath}/quickstartTests/aerogear-shootandshare-cordova/pom.xml")
                    .property("selendroid.test.app=${shootAndShareCordovaQuickstart.home}/Shoot/platforms/android/build/apk/android-debug-unaligned.apk")
                    .property("arquillian.debug=true")
                    .property("facebookEmail=${project.facebookEmail}")
                    .property("facebookPassword=${project.facebookPassword}")
                    .goal('clean')
                    .goal('test')
                    .execute().await()

            }
        }
    }
}

// build dependencies
buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        // you need this only if you plan to use SNAPSHOT version of this plugin
        maven {
            name 'jboss-staging-repository-group'
            url 'https://repository.jboss.org/nexus/content/groups/staging'
        }
    }
    dependencies {
        classpath 'org.jboss.aerogear.test:aerogear-ups-rest-api:1.0.2'
        classpath 'org.jboss.aerogear.test:spacelift-jboss-manager:0.6.0'
        classpath 'org.arquillian.spacelift.gradle:arquillian-spacelift-gradle:1.0.0-alpha-9-SNAPSHOT'
        classpath 'com.jayway.restassured:rest-assured:2.4.0'
        classpath 'com.jayway.awaitility:awaitility-groovy:1.6.3'
        classpath 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'
    }
}

// these elements are needed only if you are willing to use _testreport_ task
repositories {
    mavenLocal()
    mavenCentral()
}

configurations {
    junitreport
}

dependencies {
    junitreport 'org.apache.ant:ant-junit:1.9.4'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}
