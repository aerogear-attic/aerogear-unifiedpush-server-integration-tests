import com.google.common.io.Files
import com.jayway.awaitility.Awaitility
import com.jayway.restassured.RestAssured
import com.jayway.restassured.response.Response
import org.arquillian.spacelift.execution.Tasks
import org.arquillian.spacelift.gradle.*
import org.arquillian.spacelift.gradle.git.*
import org.arquillian.spacelift.gradle.maven.*
import org.arquillian.spacelift.gradle.openshift.*
import org.arquillian.spacelift.process.CommandBuilder
import org.arquillian.spacelift.process.ProcessInteractionBuilder
import org.arquillian.spacelift.process.impl.CommandTool
import org.arquillian.spacelift.tool.io.WriteToFileTool

import java.util.concurrent.Callable
import java.util.concurrent.TimeUnit

apply plugin: 'spacelift'

ext {
    defaultOpenShiftAppName = 'upsintegrationtests'
    defaultOpenShiftNamespace = 'mobileqa'
    defaultOpenShiftGearSize = 'small'
    defaultOpenShiftUsername = ''
    defaultOpenShiftPassword = ''
    defaultOpenShiftAppDirectory = 'unified-push'
    defaultOpenShiftCartridge = 'https://raw.githubusercontent.com/jboss-mobile/jboss-unified-push-openshift-cartridge/master/metadata/manifest.yml'

}

spacelift {
    tools {
        rhc {
            command 'rhc'
        }
        mvn {
            command {
                def m2 = System.getenv("M2")
                def m2_home = System.getenv("M2_HOME")

                if (m2 != null && !m2.isEmpty()) {
                    return Tasks.prepare(CommandTool).command(new CommandBuilder("${m2}/mvn"))
                } else if (m2_home != null && !m2_home.isEmpty()) {
                    return Tasks.prepare(CommandTool).command(new CommandBuilder("${m2_home}/bin/mvn"))
                } else {
                    return Tasks.prepare(CommandTool).command(new CommandBuilder("mvn"))
                }
            }
        }
    }

    profiles {
        openshift {
            enabledInstallations 'aerogearTestingTools', 'unifiedPushServerOpenshift'
            tests 'openshiftIntegrationTests'
        }
    }

    installations {
        aerogearTestingTools {
            product 'aerogear'
            version '1.0.2'
            remoteUrl 'https://github.com/aerogear/aerogear-testing-tools/archive/master.zip'
            home 'aerogear-testing-tools'
            fileName 'aerogear-testing-tools.zip'
            extractMapper { toDir(home).cutdirs() }
            forceReinstall true
            postActions {
                Tasks.prepare(CommandTool.class)
                        .workingDir('aerogear-testing-tools/unifiedpush-test-extension')
                        .programName('mvn')
                        .parameters('clean', 'package')
                        .interaction(new ProcessInteractionBuilder().when(".*").printToOut())
                        .execute().await()
            }
        }
        unifiedPushServerOpenshift {
            product 'aerogear'
            version '1.0.2'
            remoteUrl 'http://openshift.redhat.com'
            fileName 'index.html'
            autoExtract false
            postActions {

                def repository = File.createTempDir()
                println "Created temporary directory: $repository."

                println 'Creating OpenShift cartridge.'
                Tasks.prepare(CreateOpenshiftCartridge)
                        .named(project.openShiftAppName)
                        .at(project.openShiftNamespace)
                        .sized(project.openShiftGearSize)
                        .username(project.openShiftUsername)
                        .password(project.openShiftPassword)
                        .cartridges(project.openShiftCartridge)
                        .force()
                        .checkout()
                        .repo(repository.absolutePath)
                        .execute().await()

                def deployFile = "mv ~/app-root/repo/unifiedpush-test-extension.war ~/${project.openShiftAppDirectory}/standalone/deployments/unifiedpush-test-extension.war"

                def actionHooksDir = new File(repository, '.openshift/action_hooks/')
                actionHooksDir.mkdirs()

                List<File> addedFiles = Tasks.prepare(WriteToFileTool)
                        .write(deployFile)
                        .to(new File(actionHooksDir, 'deploy'))
                        .execute().await()

                def warFileSource = new File('aerogear-testing-tools/unifiedpush-test-extension/target/unifiedpush-test-extension.war')
                def warFileTarget = new File(repository, 'unifiedpush-test-extension.war')

                Files.copy(warFileSource, warFileTarget);

                Tasks.chain(repository, GitAddTool)
                        .add(addedFiles)
                        .add(warFileTarget)
                        .execute().await()

                addedFiles.each { addedFile ->
                    Tasks.prepare(CommandTool.class)
                            .workingDir(repository.absolutePath)
                            .programName('git')
                            .parameters('update-index', '--chmod=+x', addedFile.absolutePath)
                            .interaction(new ProcessInteractionBuilder().when(".*").printToOut())
                            .execute().await()
                }

                println 'Pushing the unifiedpush-test-extension.war into the repository.'
                Tasks.chain(repository, GitCommitTool)
                        .message('Add test extension war.')
                        .then(GitPushTool)
                        .execute().await()

                final String baseUri = "https://${project.openShiftAppName}-${project.openShiftNamespace}.rhcloud.com/unifiedpush-test-extension"

                println 'Waiting for unifiedpush-test-extension to be deployed. (max 5 minutes)'
                println "Expected deployment url: $baseUri"
                Awaitility.await().atMost(5, TimeUnit.MINUTES).pollInterval(5, TimeUnit.SECONDS).until(new Callable<Boolean>() {
                    @Override
                    Boolean call() throws Exception {
                        Response response = RestAssured.given()
                                .baseUri(baseUri)
                                .get('/status')

                        return response.statusCode == 200
                    }
                })
                println 'The unifiedpush-test-extension.war was successfully deployed.'

                println 'Reconfiguring KeyCloak.'
                RestAssured.given()
                        .baseUri(baseUri)
                        .get('/keycloak')
                        .then()
                        .log().all(true)
                        .statusCode(200)

                println 'Restaring the cartridge.'
                GradleSpacelift.tools('rhc')
                        .parameters('app', 'restart')
                        .parameters('-a', project.openShiftAppName)
                        .parameters('-n', project.openShiftNamespace)
                        .parameters('-l', project.openShiftUsername)
                        .parameters('-p', project.openShiftPassword)
                        .execute().await()

                println 'Waiting for unifiedpush-test-extension to be deployed. (max 5 minutes)'
                println "Expected deployment url: $baseUri"
                Awaitility.await().atMost(5, TimeUnit.MINUTES).pollInterval(5, TimeUnit.SECONDS).until(new Callable<Boolean>() {
                    @Override
                    Boolean call() throws Exception {
                        Response response = RestAssured.given()
                                .baseUri(baseUri)
                                .get('/status')

                        return response.statusCode == 200
                    }
                })
                println 'The unifiedpush-test-extension.war was successfully deployed.'

            }
        }
    }

    tests {
        openshiftIntegrationTests {
            // replace property version.arquillian.core with compatibility version
            execute {
                // execute all tests in the extension
                Tasks.prepare(MavenExecutor).pom("pom.xml")
                        .profile('openshift')
                        .property("http.ignore=true")
                        .property("openshift.app=${project.openShiftAppName}")
                        .property("keystore.ignore=true")
                        .goals('clean', 'test').execute().await()
            }
        }
    }
}

// build dependencies
buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        // you need this only if you plan to use SNAPSHOT version of this plugin
        maven {
            name 'jboss-staging-repository-group'
            url 'https://repository.jboss.org/nexus/content/groups/staging'
        }
    }
    dependencies {
        classpath 'org.arquillian.spacelift.gradle:arquillian-spacelift-gradle-plugin:1.0.0-alpha-4'
        classpath 'com.jayway.restassured:rest-assured:2.4.0'
        classpath 'com.jayway.awaitility:awaitility-groovy:1.6.2'
    }
}

// these elements are needed only if you are willing to use _testreport_ task
repositories {
    mavenCentral()
}

configurations {
    junitreport
}

dependencies {
    junitreport 'org.apache.ant:ant-junit:1.9.4'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.2'
}