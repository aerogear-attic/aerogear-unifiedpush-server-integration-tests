buildscript {
    repositories {
        mavenCentral()
        jcenter()
        // you need this only if you plan to use SNAPSHOT version of this plugin
        maven {
            name 'jboss-staging-repository-group'
            url 'https://repository.jboss.org/nexus/content/groups/staging'
        }
    }
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:0.5.0.RELEASE"
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.1'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

def versions = [
        aerogearParent: '0.2.13',
        unifiedPushServer: '1.1.0-beta.1',
        unifiedPushJavaClient: '1.1.0-beta.1',
        arquillian: '1.1.8.Final',
        keycloak: '1.1.0.Final',
        httpClient: '4.4',
        spacelift: '1.0.0.Alpha7'
]

subprojects {
    apply plugin: "io.spring.dependency-management"

    dependencyManagement {
        imports {
            mavenBom "org.jboss.aerogear:aerogear-parent:${versions.aerogearParent}"
            mavenBom "org.jboss.aerogear:aerogear-bom:${versions.aerogearParent}"
            mavenBom "org.jboss.aerogear:aerogear-test-bom:${versions.aerogearParent}"
            mavenBom 'org.jboss.arquillian.graphene:graphene-webdriver:2.1.0.Alpha2'
            mavenBom "org.jboss.arquillian:arquillian-bom:${versions.arquillian}"
        }
    }

    repositories {
        mavenCentral()

        // add repository from Spacelift
        maven {
            name "spacelift"
            url "spacelift/workspace/.repository"
        }
        maven {
            name 'jboss-staging-repository-group'
            url 'https://repository.jboss.org/nexus/content/groups/staging'
        }
        maven {
            name 'Atlassian public releases'
            url 'https://m2proxy.atlassian.com/repository/public'
        }
    }
}

project('tests') {

    subprojects {
        apply plugin: 'java'

        configurations {
            // Without this exclusion, first usage of RestAssured fails with message that groovy-xml 2.3.7 is already
            // loaded and we are trying to load 2.2.1.
            all*.exclude group: 'org.codehaus.groovy', module: 'groovy-xml'
        }

        dependencyManagement {
            dependencies {
                // Http Client version has to be aligned across REST Assured, Selenium and Keycloak
                dependency "org.apache.httpcomponents:httpcore:${versions.httpClient}"
                dependency "org.apache.httpcomponents:httpclient:${versions.httpClient}"
                dependency "org.apache.httpcomponents:httpmime:${versions.httpClient}"
                dependency 'org.jboss.aerogear.test.arquillian:arquillian-non-deploying-container:0.4.0'
                dependency "org.arquillian.spacelift:arquillian-spacelift:${versions.spacelift}"
            }
        }

        test {
            useJUnit()

            if (project.hasProperty('ignoreTestFailures')) {
                ignoreFailures = project['ignoreTestFailures']
            }

            if (project.hasProperty('containerUri')) {
                systemProperty 'containerUri', project['containerUri']
            }

            if (project.hasProperty('keystore')) {
                systemProperty 'javax.net.ssl.keyStore', project['keystore']
            }

            if (project.hasProperty('keystorePass')) {
                systemProperty 'javax.net.ssl.keyStorePassword', project['keystorePass']
            }

            if (project.hasProperty('truststore')) {
                systemProperty 'javax.net.ssl.trustStore', project['truststore']
            }

            if (project.hasProperty('truststorePass')) {
                systemProperty 'javax.net.ssl.trustStorePassword', project['truststorePass']
            }

            // workaround https://github.com/arquillian/arquillian-governor/issues/2
            beforeSuite {
                project.ant.mkdir(dir: project.file('target'))
            }
        }

    }

    project('common') {
        dependencies {
            compile "org.apache.httpcomponents:httpcore:${versions.httpClient}"
            compile "org.apache.httpcomponents:httpclient:${versions.httpClient}"
            compile 'org.jboss.arquillian.core:arquillian-core-spi'
            compile 'org.jboss.arquillian.core:arquillian-core-impl-base'
            compile 'org.jboss.arquillian.junit:arquillian-junit-container'
            compile "org.jboss.aerogear:unifiedpush-java-client:${versions.unifiedPushServer}"
            compile project(":tools:test-extension:client")
            compile 'junit:junit:4.11'
            compile project(':tools:aerogear-ups-rest-api')
            compile 'org.jboss.aerogear.test.arquillian:arquillian-rule:0.3.0'
            compile 'org.jboss.aerogear.test.arquillian:arquillian-non-deploying-container-checks-api:0.4.0'
            compile 'org.jboss.aerogear.test.arquillian:arquillian-non-deploying-container:0.4.0'
            compile 'org.arquillian.spacelift:arquillian-spacelift:1.0.0.Alpha7'
            compile 'org.arquillian.extension:arquillian-governor-jira:1.0.0.Alpha2'
            compile 'org.arquillian.extension:arquillian-governor-skipper:1.0.0.Alpha2'
            compile 'org.arquillian.extension:arquillian-recorder-reporter-impl:1.0.0.Final'
        }
    }

    project('admin-ui') {

        dependencies {
            testCompile project(':tests:common')

            testCompile "org.apache.httpcomponents:httpcore:${versions.httpClient}"
            testCompile "org.apache.httpcomponents:httpclient:${versions.httpClient}"

            testCompile 'org.jboss.arquillian.extension:arquillian-angularjs-graphene:1.2.0.Beta1'
            testCompile 'org.mockito:mockito-core:2.0.7-beta'
            testCompile 'org.jboss.shrinkwrap.resolver:shrinkwrap-resolver-depchain:2.2.0-beta-2'
            testCompile 'org.jboss.arquillian.protocol:arquillian-protocol-servlet'
            testCompile project(':tools:aerogear-ups-rest-api')

            testCompile 'org.json:json:20140107'
            testCompile project(':tools:test-extension:client')
            testCompile 'org.jboss.shrinkwrap.descriptors:shrinkwrap-descriptors-impl-jboss:2.0.0-alpha-6'
            testCompile 'org.jboss.arquillian.graphene:graphene-webdriver:2.1.0.Alpha2'
        }
    }

    project('integration') {
        dependencies {
            testCompile project(':tests:common')
            testCompile 'org.jboss.logging:jboss-logging:3.2.1.Final'
            testCompile 'io.undertow:undertow-core:1.0.1.Final'
            testCompile 'org.json:json:20140107'
        }
    }

    project('performance') {
        dependencies {
            testCompile project(':tests:common')
        }
    }

}

project('tools') {

    subprojects {
        apply plugin: 'java'
        apply plugin: 'idea'

        configurations {
            provided
        }

        sourceSets {
            main.compileClasspath += configurations.provided

            test.compileClasspath += configurations.provided
            test.runtimeClasspath += configurations.provided
        }

        idea {
            module {
                scopes.PROVIDED.plus += [configurations.provided]
            }
        }
    }

    project('aerogear-ups-rest-api') {
        dependencies {
            compile "org.jboss.aerogear.unifiedpush:unifiedpush-model-api:${versions.unifiedPushServer}"
            compile "org.jboss.aerogear:unifiedpush-java-client:${versions.unifiedPushJavaClient}"
            compile "org.keycloak:keycloak-core:${versions.keycloak}"
            compile 'com.jayway.restassured:rest-assured'
            compile 'com.jayway.restassured:json-path'
            compile 'com.jayway.awaitility:awaitility'
            compile 'com.googlecode.json-simple:json-simple:1.1.1'
        }
    }

    project('test-extension') {

        project('common') {
            dependencies {
                provided 'javax.validation:validation-api:1.0.0.GA'
                compile "org.jboss.aerogear.unifiedpush:unifiedpush-model-api:${versions.unifiedPushServer}"
                compile 'com.ganyo:gcm-server:1.0.2'
                compile 'commons-codec:commons-codec'
            }
        }

        project('client') {
            apply plugin: 'application'

            dependencies {
                compile project(':tools:test-extension:common')
                compile project(':tools:aerogear-ups-rest-api')
                compile 'io.airlift:airline:0.7'
                compile 'org.arquillian.spacelift:arquillian-spacelift:1.0.0.Alpha7'
                compile 'commons-io:commons-io:2.4'
            }

            mainClassName = 'org.jboss.aerogear.test.cli.UpteCli'
        }

        project('server') {
            apply plugin: 'war'

            repositories {
                mavenCentral()
                maven {
                    url 'https://jitpack.io'
                }
            }

            sourceSets.all {
                output.resourcesDir = output.classesDir
            }

            dependencyManagement {
                imports {
                    mavenBom 'org.jboss.bom.eap:jboss-javaee-6.0-with-resteasy:6.2.0-redhat-1'
                    mavenBom "org.jboss.aerogear:aerogear-bom:${versions.aerogearParent}"
                    mavenBom "org.keycloak:keycloak-dependencies-server-min:${versions.keycloak}"
                }
            }

            dependencies {
                compile project(':tools:test-extension:common')
                compile "org.jboss.aerogear.unifiedpush:unifiedpush-model-jpa:${versions.unifiedPushServer}"
                compile "org.jboss.aerogear:unifiedpush-java-client:${versions.unifiedPushJavaClient}"
                provided 'javax.validation:validation-api:1.0.0.GA'
                compile 'org.apache.commons:commons-math3:3.3'
                compile 'com.github.TadeasKriz:LittleProxy:1.1.0-beta-1-SNAPSHOT3'
                provided 'javax.inject:javax.inject'
                provided 'org.jboss.spec.javax.ejb:jboss-ejb-api_3.1_spec'
                provided 'org.jboss.spec.javax.servlet:jboss-servlet-api_3.0_spec'
                provided 'org.jboss.resteasy:resteasy-jaxrs'
                provided 'javax.enterprise:cdi-api'
                compile "org.keycloak:keycloak-connections-jpa"
                compile 'org.keycloak:keycloak-model-jpa'
                compile 'org.keycloak:keycloak-model-sessions-mem'
                compile 'org.keycloak:keycloak-model-sessions-jpa'
                provided 'org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final'
                provided 'org.hibernate:hibernate-entitymanager:4.0.1.Final'
                compile 'io.netty:netty-all:4.0.23.Final'
                compile 'com.ganyo:gcm-server:1.0.2'
                compile 'com.fasterxml.jackson.core:jackson-databind:2.3.0'
            }

            tasks.create("remove_keycloak_persistence") << {
                def serverWar = file('build/libs/server.war')
                def tmpDir = file("build/tmp/expandedArchives")
                def serverExpanded = new File(tmpDir, 'server.war')

                copy {
                    from zipTree(serverWar)
                    into serverExpanded
                }

                fileTree(serverExpanded).filter {
                    it.name.startsWith('keycloak-connections-jpa-') && it.name.endsWith('.jar')
                } .each { keycloakJar ->
                    def keycloakExpanded = new File(tmpDir, keycloakJar.name)
                    copy {
                        from zipTree(keycloakJar)
                        into keycloakExpanded
                    }

                    tasks.create("createKeycloak", Zip) {
                        from(fileTree(keycloakExpanded)) {
                            exclude('**/persistence.xml')
                        }
                        destinationDir = keycloakJar.parentFile
                        archiveName = keycloakJar.name
                    }.execute()
                }

                tasks.create('createNewServer', Zip) {
                    from fileTree(serverExpanded)
                    destinationDir = serverWar.parentFile
                    archiveName = serverWar.name
                }.execute()
            }
            tasks.remove_keycloak_persistence.dependsOn tasks.war
            tasks.assemble.dependsOn tasks.remove_keycloak_persistence
        }

    }

}
